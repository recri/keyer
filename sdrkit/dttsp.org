* do_rx
** [[do_rx_pre]]
** one of
*** [[do_rx_SBCW]]
*** [[do_rx_AM]]
*** [[do_rx_FM]]
*** [[do_rx_DRM]]
*** [[do_rx_SPEC]]
** [[do_rx_post]]
* do_rx_pre
** * gain
** [[do_rx_spectrum]] SPEC_SEMI_RAW
** one of
*** [[noiseblanker]]
*** [[SDROMnoiseblanker]]
*** nothing
** [[do_rx_meter]] RXMETER_PRE_CONV
** correctIQ
** 2nd IF conversion - * oscillator
** [[do_rx_spectrum]] SPEC_PRE_FILT
** if mode != SPEC
**** filter_OvSv
** [[do_rxmeter]] RXMETER_POST_FILT
** [[do_rx_spectrum]] SPEC_POST_FILT
** if cpd.flag
**** WSCompand
** DttSPAgc
** [[do_rx_meter]] RXMETER_POST_AGC
** [[do_rx_spectrum]] SPEC_POST_AGC
* do_rx_post
** do one of
*** if squelch.set [[do_rx_squelch]]
*** [[no_rx_squelch]]
**** if spot.flag [[SpotTone]]
** if grapheq.flag [[graficeq]]
** [[do_rx_spectrum]] SPEC_POST_DET
** * gain.o
** if bin.flag
* do_rx_SBCW
** if bin.flag # binaural
*** if banr.flag && anr.flag
**** blms_adapt banr.gen
*** if banf.flag && anf.flag
**** blms_adapt banf.gen
** else       # not binaural
*** if anr.flag
**** if banr.flag
***** blms_adapt banr.gen
**** else
***** lmsr_adapt anr.gen
*** if anf.flag
**** if banf.flag
***** blms_adapt banf.gen
**** else
***** lmsr_adapt anf.gen
**** set sample.imag to sample.real for all
* do_rx_AM
** [[AMDemod]]
** if anf.flag
*** if ! banf.flag
**** lmsr_adapt anf.gen
*** else
**** blms_adapt banf.gen
* do_rx_FM
** FMDemod    
* do_rx_DRM
* do_rx_SPEC
* do_rx_meter
** one of
*** RXMETER_PRE_CONV: meter = complex(dBP(max(fabs(real))), dBP(max(fabs(imag))))
*** RXMETER_POST_FILT: meter = log10P(mean(squared(mag()))) and some
*** RXMETER_POST_AGC: meter = dttspagc.gain.now
* do_rx_spectrum
** if SPEC_POST_DET: accumulate complex(real*sqrt(2), 0)
** else accumulate samples
