#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set libdir [file normalize [file join [file dirname [info script]] .. lib sdrkit]]
set so [info sharedlibextension]

#
# verify that each loadable library loads
# and see what else works
#
# you should start the default jack server with qjackctl
# before running this test
#
catch {exec jack_control status} result
switch -glob $result {
    *stopped* {
	puts "jackd is stopped, starting with defaults"
	exec jack_control start
    }
    *started {}
    default { error "unknown jackd status: $result" }
}

#
# array to identify which other tricks to try
array set data {
    agc {sdrkit::agc norm}
    audio_tap {sdrkit::audio-tap atap}
    constant {sdrkit::constant norm}
    demod_am {sdrkit::demod-am norm}
    demod_fm {sdrkit::demod-fm norm}
    demod_sam {sdrkit::demod-sam norm}
    fftw {sdrkit::fftw no-jack}
    filter_biquad {sdrkit::filter-biquad norm}
    gain {sdrkit::gain norm}
    iq_balance {sdrkit::iq-balance norm}
    iq_correct {sdrkit::iq-correct norm}
    iq_noise {sdrkit::iq-noise norm}
    iq_swap {sdrkit::iq-swap norm}
    jack_client {sdrkit::jack-client norm}
    keyer_ascii {keyer::ascii norm}
    keyer_debounce {keyer::debounce norm}
    keyer_detime {keyer::detime norm}
    keyer_detone {keyer::detone norm}
    keyer_dttsp_iambic {keyer::dttsp-iambic norm}
    keyer_iambic {keyer::iambic norm}
    keyer_ptt {keyer::ptt norm}
    keyer_ptt_mute {keyer::ptt-mute norm}
    keyer_tone {keyer::tone norm}
    lo_mixer {sdrkit::lo-mixer norm}
    midi_insert {sdrkit::midi-insert norm}
    midi_tap {sdrkit::midi-tap norm}
    mixer {sdrkit::mixer norm}
    mono_to_iq {sdrkit::mono-to-iq norm}
    noise {sdrkit::noise norm}
    oscillator {sdrkit::oscillator norm}
    oscillator_f {sdrkit::oscillator-f norm}
    oscillator_fd {sdrkit::oscillator-fd norm}
    oscillator_t {sdrkit::oscillator-t norm}
    oscillator_td {sdrkit::oscillator-td norm}
    oscillator_z {sdrkit::oscillator-z norm}
    oscillator_zd {sdrkit::oscillator-zd norm}
    window {sdrkit::window no-jack}
}

array set options {
    -a1 {type float}
    -a2 {type float}
    -alsp {values {0 1} type integer}
    -awsp {values {0 1} type integer}
    -b0 {type float}
    -b1 {type float}
    -b2 {type float}
    -chan {range {1 16} type integer}
    -client {create-only 1 type string}
    -dah {range {2.5 3.5} type float}
    -delay {range {0 5000} type integer}
    -dict {type dict}
    -direction {values {-1 1} type integer}
    -fall {range {1 10} type float}
    -freq {range {-10000 10000} type float}
    -gain {range {0 -160} type float}
    -hang {range {0 10} type float}
    -ies {range {0.5 1.5} type float}
    -ils {range {2.5 3.5} type float}
    -imag {type float}
    -iws {range {6 8} type float}
    -level {range {0 -160} type float}
    -linear-gain {range {1e-6 1} type float}
    -mdit {values {0 1} type integer} 
    -mdah {values {0 1} type integer}
    -mide {values {0 1} type integer}
    -mode {values {A B} type string}
    -mu {range {0 1} type float}
    -note {range {0 127} type integer}
    -period {range {10 10000} type float}
    -planbits {type integer}
    -real {type float}
    -rise {range {1 10} type float}
    -seed {create-only 1 type integer range {1 2147483648}}
    -server {create-only 1 type string}
    -sine-phase {range {-1.0 1.0} type float}
    -size {range {1 10000} type integer}
    -steps {values {1 64} type integer}
    -swap {values {0 1} type integer}
    -verbose {range {0 100} type integer}
    -weight {range {25 75} type integer}
    -window {range {0 12} type integer}
    -word {range {50 60} type float}
    -wpm {range {5 50} type float}
}

array set dbnames {
    alsp {}
    awsp {}
    channel {}
    client {}
    dah {}
    delay {}
    dict {}
    direction {}
    fall {}
    frequency {}
    gain {}
    hang {}
    ies {}
    ils {}
    imag {}
    iws {}
    level {}
    mdah {}
    mdit {}
    mide {}
    mode {}
    mu {}
    note {}
    period {}
    phase {}
    planbits {}
    real {}
    rise {}
    seed {}
    server {}
    size {}
    steps {}
    swap {}
    tap {}
    verbose {}
    weight {}
    window {}
    word {}
    wpm {}
}

array set clnames {
    Bool {}
    Channel {}
    Char {}
    Client {}
    Decibel {}
    Decibels {}
    Delay {}
    Direction {}
    Dits {}
    Gain {}
    Hang {}
    Hertz {}
    Imag {}
    Memo {}
    Mode {}
    Morse {}
    Mu {}
    Note {}
    Period {}
    Phase {}
    Planbits {}
    Ramp {}
    Real {}
    Samples {}
    Seed {}
    Server {}
    Steps {}
    Tap {}
    Verbose {}
    Window {}
    Words {}
}

array set results {
    load-succeeded 0
    load-failed 0
}

proc rand-int-in-range-not-equal-val {min max val} {
    while {[set newval [expr {$min+int(rand()*($max-$min))}]] == $val} continue
    return $newval
}
proc rand-int-in-list-not-equal-val {list val} {
    while {[set newval [lindex $list [expr {int(rand()*[llength $list])}]]] == $val} continue
    return $newval
}
proc rand-element-in-list-ne-val {list val} {
    while {[set newval [lindex $list [expr {int(rand()*[llength $list])}]]] ne $val} continue
    return $newval
}
proc rand-float-in-range-not-equal-val {min max val} {
    while {[set newval [expr {$min+rand()*($max-$min)}]] == $val} continue
    return $newval
}

foreach file [glob [file join $libdir *$so]] {
    set module [file root [file tail $file]]
    if {[catch {load $file} error]} {
	puts "load $file -> $error"
	incr results(load-failed)
    } else {
	if {[catch {
	    incr results(load-succeeded)
	    if { ! [info exist data($module)]} {
		puts "no module data for $module"
		continue
	    } 
	    lassign $data($module) factory type
	    switch $type {
		norm {
		    if {[catch {$factory foo} error]} {
			puts "factory $factory failed -> $error"
			continue
		    }
		    if {[catch {foo configure} error]} {
			puts "factory $factory configure failed -> $error"
			continue
		    }
		    set opts $error
		    set create {}
		    foreach conf $opts {
			foreach {opt dbname clname defval curval} $conf break
			set opt [lindex $conf 0]
			if {[catch {foo cget $opt} error]} {
			    puts "factory $factory cget $opt failed -> $error"
			    continue
			}
			set val $error
			if {[catch {foo cdoc $opt} error]} {
			    puts "factory $factory cdoc $opt failed -> $error"
			} elseif {$error eq {}} {
			    puts "factory $factory cdoc $opt returned blank"
			}
			if { ! [info exists options($opt)]} {
			    puts "no info on option $opt"
			    set options($opt) 1
			    continue;
			}
			if { ! [info exists dbnames($dbname)]} {
			    puts "no info on option dbname $dbname"
			    set dbnames($dbname) 1
			}
			if { ! [info exists clnames($clname)]} {
			    puts "no info on option clname $clname"
			    set clnames($clname) 1
			}
			
			catch {array unset props}
			array set props $options($opt)
			switch $props(type) {
			    integer {
				if {$val != $defval} {
				    puts "factory $factory config $opt did not create with default value, $val != $defval"
				}
			    }
			    float {
				if {$defval != $val && abs($val-$defval)/$defval > 1e-6} {
				    puts "factory $factory config $opt did not create with default value, $val != $defval"
				}
			    }
			    string {
				if {$opt ne {-client} && $val ne $defval} {
				    puts "factory $factory config $opt did not create with default value, $val != $defval"
				}
			    }
			    dict {
			    }
			    default {
				puts "factory $factory config $opt has type $props(type)"
			    }
			}
			if {[info exists props(create-only)] && $props(create-only)} {
			    if { ! [catch {foo config $opt new-value} error]} {
				puts "factory $factory config $opt succeeded for create-only option? -> $error"
				continue
			    }
			} else {
			    switch $props(type) {
				integer {
				    if {[info exists props(range)]} {
					set newval [rand-int-in-range-not-equal-val {*}$props(range) $val]
				    } elseif {[info exists props(values)]} {
					set newval [rand-int-in-list-not-equal-val $props(values) $val]
				    } else {
					set newval [expr {$val+1}]
				    }
				}
				float {
				    if {[info exists props(range)]} {
					set newval [rand-float-in-range-not-equal-val {*}$props(range) $val]
				    } else {
					set newval [rand-float-in-range-not-equal-val -1e3 1e3 $val]
				    }
				}
				string {
				    if {[info exists props(values)]} {
					set newval [rand-element-in-list-ne-val $props(values) $val]
				    } else {
					set newval "value[expr {int(rand()*100)}]"
				    }
				}
				dict { continue }
				default {
				    puts "option type for $opt is type $props(type)"
				    continue
				}
			    }
			    if {[catch {foo configure $opt $newval} error]} {
				puts "factory $factory configure $opt $newval failed -> $error"
				continue
			    }
			    if {[catch {foo cget $opt} error]} {
				puts "factory $factory cget $opt failed -> $error"
				continue
			    }
			    switch $props(type) {
				integer {
				    if {$error != $newval} {
					puts "factory $factory cget $opt returned $error instead of $newval"
					continue
				    }
				}
				float {
				    if {abs($error-$newval)/$newval > 1e-6} {
					puts "factory $factory cget $opt returned $error instead of $newval"
					continue
				    }
				}
				string {
				    if {$error ne $newval} {
					puts "factory $factory cget $opt returned $error instead of $newval"
					continue
				    }
				}
				default {
				    puts "option type for $opt is type $props(type)"
				    continue
				}
			    }
			    # save non-default opt value pairs
			    # for the test of whether create honors
			    # option settings
			    if {$opt ne {-verbose}} {
				lappend create $opt $newval
			    }
			}
		    }
		    if {[catch {foo cdoc} error]} {
			puts "factory $factory cdoc for command failed -> $error"
		    } elseif {$error eq {}} {
			puts "factory $factory cdoc for command returned blank"
		    }
		    if {[catch {rename foo {}} error]} {
			puts "rename $factory {} failed -> $error"
		    }
		    #
		    # now create a new foo with specified option values
		    # and see if they're honored
		    # we omit the -server option for the moment
		    #
		    lappend create -client superfoo
		    if {[catch {$factory foo {*}$create} error]} {
			puts "factory $factory foo $create failed -> $error"
			continue
		    }
		    foreach {opt val} $create {
			if {[catch {foo cget $opt} error]} {
			    puts "factory $factory foo cget $opt failed -> $error"
			    continue
			}
			set getval $error
			catch {array unset props}
			array set props $options($opt)
			switch $props(type) {
			    integer {
				if {$val != $getval} {
				    puts "factory $factory config $opt did not create with specified value, $val != $getval"
				}
			    }
			    float {
				if {$getval != $val && abs($val-$getval)/$val > 1e-6} {
				    puts "factory $factory config $opt did not create with specified value, $val != $getval"
				}
			    }
			    string {
				if {$val ne $getval} {
				    puts "factory $factory config $opt did not create with specified value, $val != $getval"
				}
			    }
			    dict {
			    }
			    default {
				puts "factory $factory config $opt has type $props(type)"
			    }
			}
		    }
		    if {[catch {rename foo {}} error]} {
			puts "rename $factory {} failed -> $error"
		    }
		}
	    }
	} error]} {
	    puts "error testing $file: $error"
	    catch {rename foo {}}
	}
    }
}

