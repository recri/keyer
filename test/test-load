#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set libdir [file normalize [file join [file dirname [info script]] .. lib sdrtcl]]
set so [info sharedlibextension]

source [file join $libdir options.tcl]

#
# verify that each loadable library loads
# and see what else works
#
# you should start the default jack server with qjackctl
# before running this test
#
catch {exec jack_control status} result
switch -glob $result {
    *stopped* {
	puts "jackd is stopped, starting with defaults"
	exec jack_control start
    }
    *started {}
    default { error "unknown jackd status: $result" }
}

array set results {
    load-succeeded 0
    load-failed 0
}

proc rand-int-in-range-not-equal-val {min max val} {
    while {[set newval [expr {$min+int(rand()*($max-$min))}]] == $val} continue
    return $newval
}
proc rand-int-in-list-not-equal-val {list val} {
    while {[set newval [lindex $list [expr {int(rand()*[llength $list])}]]] == $val} continue
    return $newval
}
proc rand-element-in-list-ne-val {list val} {
    while {[set newval [lindex $list [expr {int(rand()*[llength $list])}]]] ne $val} continue
    return $newval
}
proc rand-float-in-range-not-equal-val {min max val} {
    while {[set newval [expr {$min+rand()*($max-$min)}]] == $val} continue
    return $newval
}


foreach file [glob [file join $libdir *$so]] {
    set module [file root [file tail $file]]
    if {[catch {load $file} error]} {
	puts "load $file -> $error"
	incr results(load-failed)
    } else {
	if {[catch {
	    incr results(load-succeeded)
	    if { ! [sdrkit-module-has-info $module]} {
		puts "no module data for $module"
		continue
	    } 
	    set factory [sdrkit-module-factory $module]
	    set type [sdrkit-module-type $module]
	    switch $type {
		norm {
		    if {[catch {$factory foo} error]} {
			puts "factory $factory failed -> $error"
			continue
		    }
		    if {[catch {foo configure} error]} {
			puts "factory $factory configure failed -> $error"
			continue
		    }
		    set opts $error
		    sdrkit-option-note-configure $factory $opts
		    set create {}
		    foreach conf $opts {
			foreach {opt dbname clname defval curval} $conf break
			set opt [lindex $conf 0]
			if {[catch {foo cget $opt} error]} {
			    puts "factory $factory cget $opt failed -> $error"
			    continue
			}
			set val $error
			if {[catch {foo cdoc $opt} error]} {
			    puts "factory $factory cdoc $opt failed -> $error"
			} elseif {$error eq {}} {
			    puts "factory $factory cdoc $opt returned blank"
			}
			if { ! [sdrkit-option-has-info $opt]} {
			    puts "no info on option $opt"
			    sdrkit-option-mark-seen $opt
			    continue;
			}
			if { ! [sdrkit-dbname-has-info $dbname]} {
			    puts "no info on option dbname $dbname"
			    sdrkit-dbname-mark-seen $dbname
			}
			if { ! [sdrkit-clname-has-info $clname]} {
			    puts "no info on option clname $clname"
			    sdrkit-clname-mark-seen $clname
			}
			
			catch {array unset props}
			array set props [sdrkit-get-props $factory $opt $dbname $clname]
			switch $props(type) {
			    integer {
				if {$val != $defval} {
				    puts "factory $factory config $opt did not create with default value, $val != $defval"
				}
			    }
			    float {
				if {$defval != $val && abs($val-$defval)/$defval > 1e-6} {
				    puts "factory $factory config $opt did not create with default value, $val != $defval"
				}
			    }
			    string {
				if {$opt ne {-client} && $val ne $defval} {
				    puts "factory $factory config $opt did not create with default value, $val != $defval"
				}
			    }
			    dict {
			    }
			    default {
				puts "factory $factory config $opt has type $props(type)"
			    }
			}
			if {[info exists props(create-only)] && $props(create-only)} {
			    if { ! [catch {foo config $opt new-value} error]} {
				puts "factory $factory config $opt succeeded for create-only option? -> $error"
				continue
			    }
			} else {
			    switch $props(type) {
				integer {
				    if {[info exists props(range)]} {
					set newval [rand-int-in-range-not-equal-val {*}$props(range) $val]
				    } elseif {[info exists props(values)]} {
					set newval [rand-int-in-list-not-equal-val $props(values) $val]
				    } else {
					set newval [expr {$val+1}]
				    }
				}
				float {
				    if {[info exists props(range)]} {
					set newval [rand-float-in-range-not-equal-val {*}$props(range) $val]
				    } else {
					set newval [rand-float-in-range-not-equal-val -1e3 1e3 $val]
				    }
				}
				string {
				    if {[info exists props(values)]} {
					set newval [rand-element-in-list-ne-val $props(values) $val]
				    } else {
					set newval "value[expr {int(rand()*100)}]"
				    }
				}
				dict { continue }
				default {
				    puts "option type for $opt is type $props(type)"
				    continue
				}
			    }
			    if {[catch {foo configure $opt $newval} error]} {
				puts "factory $factory configure $opt $newval failed -> $error"
				continue
			    }
			    if {[catch {foo cget $opt} error]} {
				puts "factory $factory cget $opt failed -> $error"
				continue
			    }
			    switch $props(type) {
				integer {
				    if {$error != $newval} {
					puts "factory $factory cget $opt returned $error instead of $newval"
					continue
				    }
				}
				float {
				    if {abs($error-$newval)/$newval > 1e-6} {
					puts "factory $factory cget $opt returned $error instead of $newval"
					continue
				    }
				}
				string {
				    if {$error ne $newval} {
					puts "factory $factory cget $opt returned $error instead of $newval"
					continue
				    }
				}
				default {
				    puts "option type for $opt is type $props(type)"
				    continue
				}
			    }
			    # save non-default opt value pairs
			    # for the test of whether create honors
			    # option settings
			    if {$opt ne {-verbose}} {
				lappend create $opt $newval
			    }
			}
		    }
		    if {[catch {foo cdoc} error]} {
			puts "factory $factory cdoc for command failed -> $error"
		    } elseif {$error eq {}} {
			puts "factory $factory cdoc for command returned blank"
		    }
		    if {[catch {rename foo {}} error]} {
			puts "rename $factory {} failed -> $error"
		    }
		    #
		    # now create a new foo with specified option values
		    # and see if they're honored
		    # we omit the -server option for the moment
		    #
		    lappend create -client superfoo
		    if {[catch {$factory foo {*}$create} error]} {
			puts "factory $factory foo $create failed -> $error"
			continue
		    }
		    foreach {opt val} $create {
			if {[catch {foo cget $opt} error]} {
			    puts "factory $factory foo cget $opt failed -> $error"
			    continue
			}
			set getval $error
			catch {array unset props}
			array set props [sdrkit-get-props $factory $opt $dbname $clname]
			switch $props(type) {
			    integer {
				if {$val != $getval} {
				    puts "factory $factory config $opt did not create with specified value, $val != $getval"
				}
			    }
			    float {
				if {$getval != $val && abs($val-$getval)/$val > 1e-6} {
				    puts "factory $factory config $opt did not create with specified value, $val != $getval"
				}
			    }
			    string {
				if {$val ne $getval} {
				    puts "factory $factory config $opt did not create with specified value, $val != $getval"
				}
			    }
			    dict {
			    }
			    default {
				puts "factory $factory config $opt has type $props(type)"
			    }
			}
		    }
		    if {[catch {rename foo {}} error]} {
			puts "rename $factory {} failed -> $error"
		    }
		}
	    }
	} error]} {
	    puts "error testing $file: $error"
	    catch {rename foo {}}
	}
    }
}

