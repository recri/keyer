#!/usr/bin/tclsh8.6
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2013 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk

package require sdrtcl::midi
package require sdrtcl::jack-client

array set data {
    nodes {node1 node2 node3 node4 node5}
}
proc log {msg} {
    # puts "[clock format [clock seconds]] $msg"
    .t.l insert end "[clock format [clock seconds]] $msg\n"
}

proc log-cmds args {
    foreach cmd $args {
	log "$cmd -> [{*}$cmd]"
    }
}

proc poll-midi-in {} {
    foreach event [midi get] {
	puts $event
    }
    set ::data(midi-in-poll) [after 100 poll-midi-in]
}

proc jackchanged {cmd} {
    # puts "jackchanged $cmd"
    switch $cmd {
	start {
	    jack-client register
	    midi register
	    midi activate
	    midi start
	    # we eventually need to be connected to every midi port
	    # that appears as it appears
	    # for now we settle for connecting to all the ports that
	    # have appeared
	    foreach {port attrib} [jack-client list-ports] {
		array set p $attrib
		if {$p(type) eq {midi}} {
		    # puts "$port -> {$attrib}"
		    if { ! [string match {dssdr:*} $port]} {
			if {$p(direction) eq {output}} {
			    jack-client connect $port dssdr:midi_in
			} elseif {$p(direction) eq {input}} {
			    jack-client connect dssdr:midi_out $port
			} else {
			    error "midi $port -> {$attrib}???"
			}
		    }
		}
	    }
	    set data(midi-in-poll) [after 100 poll-midi-in]
	}
	stop {
	    catch {after cancel $::data(midi-in-poll)}
	    catch {midi stop}
	    catch {midi deactivate}
	    catch {midi deregister}
	    catch {jack-client deregister}
	}
    }
}

proc sysex-send {msg} {
    midi put [binary format cccca*c 0xF0 0x7D 0x7C 0x7B $msg 0xF7]
}

proc mainline {} {
    pack [ttk::notebook .t] -side top -fill both -expand true
    set ::data(usb) [sdrkit::startup-usb ::myusb]
    set ::data(alsa) [sdrkit::startup-alsa ::myalsa]
    set ::data(jack) [sdrkit::startup-jack ::myjack -alsa $::data(alsa) -onchange jackchanged]
    .t add [$::data(jack) panel .t.j -onchange jackchanged] -text jack
    .t add [$::data(alsa) panel .t.a] -text alsa
    .t add [$::data(usb) panel .t.u] -text usb
    .t add [sdrtk::vtext .t.l -scrollbar right -width 20] -text log
    pack [ttk::frame .m] -side bottom
}

switch -glob $argv {
    main* {
    }
    node* {
    }
}

if {$argv ne {}} {
    set data(nodes) $argv
}

sdrtcl::jack-client jack-client
foreach node $data(nodes) {
    sdrtcl::midi $node
}

