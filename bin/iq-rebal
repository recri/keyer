#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk
package require sdrkit
package require sdrkit::jack
package require sdrkit::iq-correct

#
# and an iq-correct to rebalance the oscillator
#
array set data {
    server default
    length 320
    corrector-on 0
    corrector-mu 0.25
    corrector-wi 0.00
    corrector-wq 0.00
}

namespace eval ::meters {}

##
## meter the possible iq balancing signals
## this is plotting the transform applied
## to incoming iq signals
##
proc ::meters::update {w} {
    upvar #0 ::meters::$w data
    foreach {wi wq} [iq-correct get] break
    set xy {}
    foreach {t ct st} $data(theta-cos-sin) {
	lappend xy [expr {$ct - $wi * $st}] [expr {$st - $wq * $ct}]
    }
    $w coords xyplot $xy
    $w scale xyplot 0 0 75 -75
    $w move xyplot 125 125
    after 10 [list ::meters::update $w]
}

proc ::meters::setup {w n} {
    upvar #0 ::meters::$w data
    set data(n-theta) $n
    set data(theta-cos-sin) {}
    set pi [expr {atan2(0,-1)}]
    for {set i 0} {$i <= $n} {incr i} {
	set theta [expr {2*$pi*$i/$n}]
	lappend data(theta-cos-sin) $theta [expr {cos($theta)}] [expr {sin($theta)}]
    }
    catch {$w delete all}
    $w create line {0 0 0 0} -fill white -tags xyplot
}
proc ::meters {w args} {
    upvar #0 ::meters::$w data
    canvas $w -bg black -width 250 -height 250
    ::meters::setup $w 32
    return $w
}

##
## controllers for the input signal, unbalancing, and rebalancing components
##
proc more-mu {} {
    set ::data(corrector-mu) [expr {2*$::data(corrector-mu)}]
    iq-correct configure -mu $::data(corrector-mu)
}
proc less-mu {} {
    set ::data(corrector-mu) [expr {$::data(corrector-mu)/2}]
    iq-correct configure -mu $::data(corrector-mu)
}
proc reset-ws {} {
    iq-correct set 0 0
}
proc update-ws {} {
    foreach {wi wq} [iq-correct get] break
    if {[catch {
	set ::data(corrector-wi) [format %.10f $wi]
	set ::data(corrector-wq) [format %.10f $wq]
    } error]} {
	puts "$error"
    }
    after 20 [list update-ws]
}
proc corrector-onoff {} {
    if {$::data(corrector-on)} {
	#puts "iq-correct reset to -mu $::data(corrector-mu)"
	iq-correct set 0 0
	iq-correct configure -mu $::data(corrector-mu)
    } else {
	#puts "iq-correct muted to 0"
	iq-correct configure -mu 0
	iq-correct set 0 0
    }
}

proc shutdown {w} {
    if {$w eq {.}} {
	foreach client $::data(clients-to-cleanup) {
	    rename $client {}
	}
    }
}

proc start-client {module name args} {
    $module $name -server $::data(server) {*}$args
    lappend ::data(clients-to-cleanup) $name
}


proc main {argv} {
    if {$::data(max-freq) > [sdrkit::jack sample-rate]/4} {
	set ::data(max-freq) [expr {[sdrkit::jack sample-rate]/4.01}]
    }
    foreach {option value} $argv {
	switch -- $option {
	    -n - -name - --name { set ::data(name) $value }
	    -s - -server - --server { set ::data(server) $value }
	    -l - -length - --length { set ::data(length) $value }
	    default { error "unknown option \"$option\"" }
	}
    }

    sdrkit::iq-correct iq-correct
    
    wm title . sdrkit:rebal

    set row 0
    grid [ttk::label .blk$row -text {Corrector}] -row $row -column 0 -columnspan 3
    incr row
    grid [ttk::frame .blk$row] -row $row -column 0 -columnspan 3
    pack [ttk::label .blk$row.l-mu -text mu] -side left
    pack [ttk::label .blk$row.v-mu -textvariable ::data(corrector-mu) -width 15] -side left
    pack [ttk::label .blk$row.l-wi -text wi] -side left
    pack [ttk::label .blk$row.v-wi -textvariable ::data(corrector-wi) -width 15] -side left
    pack [ttk::label .blk$row.l-wq -text wq] -side left
    pack [ttk::label .blk$row.v-wq -textvariable ::data(corrector-wq) -width 15] -side left
    incr row
    grid [ttk::frame .blk$row] -row $row -column 0 -columnspan 3
    pack [ttk::checkbutton .blk$row.onoff -text {Enable} -variable ::data(corrector-on) -onvalue 1 -offvalue 0 -command corrector-onoff] -side left
    pack [ttk::button .blk$row.more-mu -text {Less mu} -command [list less-mu]] -side left
    pack [ttk::button .blk$row.less-mu -text {More mu} -command [list more-mu]] -side left
    pack [ttk::button .blk$row.reset-ws -text {Reset wi/wq} -command [list reset-ws]] -side left
    incr row
    grid [meters .blk$row] -row $row -column 0 -columnspan 3
    ::meters::update .blk$row
    grid columnconfigure . 2 -weight 100

    sdrkit::jack connect osc:out_i iq-balance:in_i
    sdrkit::jack connect osc:out_q iq-balance:in_q
    sdrkit::jack connect noise:out_i iq-balance:in_i
    sdrkit::jack connect noise:out_q iq-balance:in_q
    sdrkit::jack connect iq-noise:out_i iq-balance:in_i
    sdrkit::jack connect iq-noise:out_q iq-balance:in_q
    sdrkit::jack connect iq-balance:out_i iq-correct:in_i
    sdrkit::jack connect iq-balance:out_q iq-correct:in_q
    sdrkit::jack connect iq-correct:out_i capture_spectrum_1:in_i
    sdrkit::jack connect iq-correct:out_q capture_spectrum_1:in_q
    sdrkit::jack connect iq-correct:out_i system:playback_1
    sdrkit::jack connect iq-correct:out_q system:playback_2
    corrector-onoff
    update-ws
    bind . <Destroy> [list shutdown %W]
}

main $argv
