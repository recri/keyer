#!/usr/bin/wish8.6
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# Copyright (C) 2018 by Roger E Critchlow Jr, Charlestown, MA, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

# this is the mega-keyer script
# start arbitrary collections of sdrtcl components
# wire up their options into a dialbook
# hide, merge, or fuse options
# save the result as a preset command for later access
#

#
# use the script location to find the rest of the libraries
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
set dirname [file dirname $script]

#
# append the ../lib directory to the Tcl search path
#
lappend auto_path [file join $dirname .. lib]

#package require alsa::device
#package require alsa::pcm
package require alsa::rawmidi
#package require alsa::seq

#if {[catch {alsa::device cards} cards]} {
#    error "failed {alsa::device cards} with message: $cards"
#}

#set alldevs {}
#foreach {card name longname} $cards {
#    if {[catch {alsa::device devices $card} devices]} {
#	error "failed {alsa::device devices $card} with message $devices"
#    }
#    lappend alldevs {}$devices
#}
#if {[catch {alsa::pcm list} pcms]} {
#    error "failed {alsa::pcm list} with message $pcms"
#}
if {[catch {alsa::rawmidi list} rawmidi]} {
    error "failed {alsa::rawmidi list} with message $rawmidi"
}
proc rawmidiread {fp} {
    if {[eof $fp]} {
	close $fp
    } else {
	binary scan [read $fp] c* msg
	puts "rawmidiread $fp [lmap c $msg { format %x [expr {$c&0xff}] }]"
    }
}

foreach {name value} $rawmidi { 
    puts "$name {$value}" 
    if {[catch {alsa::rawmidi open $name r} fp]} {
	error "failed {alsa::rawmidi open $name r} with message $fp"
    }
    if {[catch {close $fp} error]} {
	error "failed {close $fp} with message $fp"
    }	
    if {[catch {alsa::rawmidi open $name r} fp]} {
	error "failed {alsa::rawmidi open $name r} with message $fp"
    }
    if {[catch {fconfigure $fp -encoding binary} error]} {
	error "failed {fconfigure $fp -binary true} with message $error"
    }
    if {[catch {fconfigure $fp -blocking false} error]} {
	error "failed {fconfigure $fp -blocking false} with message $error"
    }
    if {[catch {fconfigure $fp -buffering none} error]} {
	error "failed {fconfigure $fp -binary true} with message $error"
    }
    if {[catch {fileevent $fp readable [list rawmidiread $fp]} error]} {
	error "failed {filevent $fp readable rawmidiread} with message $error"
    }
}

