#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

# set the tcl package search path to look in ../lib from the script
lappend auto_path [file join [file dirname [info script]] .. lib]

# require the package that implements the iambic keyer
package require keyer::ascii
package require keyer::detime
package require keyer::iambic
package require keyer::tone
package require keyer::dttsp-iambic

# set the common options which all apps implement
array set opts {
    -verbose 0
    -server default
    -chan 1 -note 0
}

# switch on the script name to determine the application
switch -glob [info script] {
    *keyer-ascii {
	# default option values for the ascii keyer
	array set opts {
	    -client ascii
	    -chan 1 -note 0
	    -word 50 -wpm 18 -dah 3 -ies 1 -ils 3 -iws 7
	}
	# command to implement ascii keyer
	set command keyer::ascii
    }
    *keyer-detime {
	# default option values for the detime keyer
	array set opts {
	    -client detime
	}
	# command to implement iambic keyer
	set command keyer::detime
    }
    *keyer-iambic {
	# default option values for iambic keyer
	array set opts {
	    -client iambic
	    -word 50 -wpm 18 -dah 3 -ies 1 -ils 3 -iws 7
	    -swap 0 -alsp 0 -awsp 0 -mode A
	}
	# command to implement iambic keyer
	set command keyer::iambic
    }
    *keyer-tone {
	# default option values for tone keyer
	array set opts {
	    -client tone
	    -freq 700 -gain -30 -rise 5 -fall 5
	}
	# command to implement tone keyer
	set command keyer::tone
    }
    *dttsp-iambic {
	# default option values for dttsp iambic keyer
	array set opts {
	    -client iambic
	    -wpm 18 -mode B -mdit 1 -mdah 1 -mide 1 -alsp 0 -awsp 0 -swap 0 -weight 50
	}
	# command to implement dttsp iambic
	set command keyer::dttsp-iambic
    }
    default {
	error "unimplemented keyer command [file tail [info script]]"
    }
}

# foreach pair of arguments provided
foreach {option value} $argv {
    if {[info exists opts([string range $option 1 end])]} {
	# if the option name with a - prepended matches a default option, set it
	set opts([string range $option 1 end]) $value
    } elseif {[info exists opts($option)]} {
	# or if the option name as it is matches a default option, set it
	set opts($option) $value
    } else {
	error "unrecognized option: $option"
    }
}

# start the client
# using the command set in the switch
# using the -client option as the client name
# and using the options from the defaults or
# from the arguments supplied
set client $opts(-client)
$command $client {*}[array get opts]

# decide what to do now based on the command
switch $command {
    keyer::iambic -
    keyer::tone -
    keyer::ascii {
	# pass back inline options,
	# or, for ascii, pass back raw text input 
	fconfigure stdin -buffering line
	while {[gets stdin line] >= 0} {
	    if {[regexp {^<(.*)>$} $line all middle]} {
		#puts "matching $middle against options"
		foreach name [array names opts] {
		    set barename [string range $name 1 end]
		    # puts "matching {$barename} against {$middle}"
		    if {[string first $barename $middle] == 0} {
			set value [string range $middle [string length $barename] end]
			if {$value eq {?}} {
			    puts [$client cget $name]
			} else {
			    $client config $name $value
			}
			break
		    }
		}
	    } elseif {$command eq {keyer::ascii}} {
		$opts(-client) puts $line\n
		puts "$opts(-client) puts $line\n"
	    }
	}
    }
    keyer::detime {
	# print out what it finds
	# no inline commands, too messy
	fconfigure stdout -buffering none
	while {1} {
	    after 250
	    if {[string length [set line [$opts(-client) gets]]]} { puts -nonewline $line }
	}
    }
    keyer::dttsp-iambic {
	vwait done
    }
}
