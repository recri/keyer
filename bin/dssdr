#!/usr/bin/tclsh8.6
# -*- mode: Tcl; tab-width: 8; -*-

#
# dssdr talks to whatever tuner is connected and makes
# a useful interface.
#
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

#
# a control dial
#
package provide sdrkit::dial 1.0.0

package require Tk
package require snit
package require sdrtk::dialbook
package require sdrtk::readout-enum
package require sdrtk::readout-freq
package require sdrtk::readout-value
package require sdrkit::startup-alsa
package require sdrkit::startup-jack
package require sdrkit::startup-usb
package require sdrtk::vtext
package require sdrtcl::midi-tap
package require sdrtcl::midi-insert
package require sdrtcl::jack-client
package require sdrutil::util

namespace eval sdrkit {}

snit::widget sdrkit::dial {
    hulltype ttk::frame

    option -command -default {}
    # hmm, the actual set depends on mode
    # and whether you're running split

    option -freq -default 7050000 -configuremethod Configure
    option -tune-rate -default 50 -configuremethod Configure
    option -lo-freq -default 10000 -configuremethod Configure
    option -lo-tune-rate -default 50 -configuremethod Configure
    option -divider -default 4 -configuremethod Configure
    option -harmonic -default 1 -configuremethod Configure
    option -tuner -default qrp2000 -configuremethod Configure

    # option -agc-mode -default medium -configuremethod Configure
    # option -mode -default CWU -configuremethod Configure
    # option -cw-freq -default 400 -configuremethod Configure
    # option -bpf-width -default 200 -configuremethod Configure
    # option -rx-af-gain -default 0 -configuremethod Configure
    # option -rx-rf-gain -default 0 -configuremethod Configure

    option -sub-controls {
	freq freq {-text Freq -format {%.6f} -units MHz -step 50}
	tune-rate enum {-text {Freq Step} -values {{1 Hz} {5 Hz} {10 Hz} {25 Hz} {50 Hz} {100 Hz} {250 Hz} {500 Hz} {1 kHz} {2.5 kHz} {5 kHz} {10 kHz} {25 kHz}}} 
	lo-freq freq {-text Offset -format {%.0f} -units Hz}
	lo-tune-rate enum {-text {Offset Step} -values {{1 Hz} {5 Hz} {10 Hz} {25 Hz} {50 Hz} {100 Hz} {250 Hz} {500 Hz} {1 kHz} {2.5 kHz} {5 kHz} {10 kHz} {25 kHz}}} 
	divider enum {-text {Divider} -values {4 8 16}}
	harmonic enum {-text {Harmonic} -values {1 2 3 4 5 6 7}}
	tuner enum {-text {Tuner} -values {qrp2000 ensemble-rx ensemble-rxtx dds-60 ad9850 si570}}
    }
 
    # agc-mode enum {-text AGC -values {off long slow medium fast}}
    # mode enum {-text Mode -values {USB LSB DSB CWU CWL AM SAM FMN DIGU DIGL}}
    # cw-freq freq {-text {CW Tone} -format {%.0f} -units Hz}
    # bpf-width freq {-text {BPF Width} -format {%.0f} -units Hz}
    # rx-af-gain value {-text {RX AF Gain} -format {%.1f} -units dB -step 0.1}
    # rx-rf-gain value {-text {RX RF Gain} -format {%.1f} -units dB -step 0.1}
	
    constructor {args} {
	$self configure {*}$args
	pack [sdrtk::dialbook $win.dial] -fill both -expand true
	foreach {opt type opts} $options(-sub-controls) {
	    lappend opts -value $options(-$opt) -variable [myvar options(-$opt)] -command [mymethod Set -$opt]
	    switch $type {
		enum { sdrtk::readout-enum $win.dial.$opt {*}$opts }
		freq { sdrtk::readout-freq $win.dial.$opt {*}$opts }
		value { sdrtk::readout-value $win.dial.$opt {*}$opts }
		default { error "unanticipated type \"$type\"" }
	    }
	    $win.dial add $win.dial.$opt -text [$win.dial.$opt cget -text]
	}
    }
    method Constrain {opt val} {
	return $val
    }

    method Configure {opt val} {
	puts "Configure $opt $val"
	set options($opt) [$self Constrain $opt $val]
	switch -- $opt {
	    -tune-rate { $win.dial.freq configure -step [sdrutil::hertz $val] }
	    -lo-tune-rate { $win.dial.lo-freq configure -step [sdrutil::hertz $val] }
	    -freq { $win.dial.freq configure -value $val }
	    -lo-freq { $win.dial.lo-freq configure -value $val }
	    -divider { $win.dial.divider configure -value $val }
	    -harmonic { $win.dial.harmonic configure -value $val }
	    -tuner { $win.dial.tuner configure -value $val }
	    -agc-mode { $win.dial.agc-mode configure -value $val }
	    -mode { $win.dial.mode configure -value $val }
	    -cw-freq { $win.dial.cw-freq configure -value $val }
	    -bpf-width { $win.dial.bpf-width configure -value $val }
	    -rx-af-gain { $win.dial.rx-af-gain configure -value $val }
	    -rx-rf-gain { $win.dial.rx-rf-gain configure -value $val }
	    default { error "unanticipated option \"$opt\"" }
	}
    }

    method Set {opt val} {
	switch -- $opt {
	    -tune-rate { $self configure $opt $val }
	    -lo-tune-rate { $self configure $opt $val }
	}
	if {$options(-command) ne {}} {
	    $options(-command) $win.dial set $opt $val
	}
    }
}

array set data {
    frequency 7050000
    frequency-units MHz
    frequency-steps  1000
    tuner qrp2000

}

proc dcommand {w cmd opt val} {
    # puts "dcommand $args"
    # lassign $args cmd opt val
    switch -- $cmd {
	set {
	    switch -- $opt {
		-freq {
		    set fc [expr {$val-[$w.lo-freq cget -value]}]
		    set fu [expr {$fc / [$w.harmonic cget -value]}]
		    set fo [expr {$fu * [$w.divider cget -value]}]
		    puts "tune $fo to get $val"
		}
		-tuner {
		    puts "$args"
		}
	    }
	}
    }
}

#
# present an option menu
#
proc option-menu {w options defopt} {
    upvar #0 $w data
    set data(options) $options
    set data(selected) $defopt
    ttk::menubutton $w -textvar ${w}(selected) -menu $w.m
    menu $w.m -tearoff no
    foreach option $options {
	$w.m add radiobutton -label $option -value $option -variable ${w}(selected)
    }
    return $w
}
proc option-menu-selected {w} {
    upvar #0 $w data
    return $data(selected)
}


proc log {msg} {
    # puts "[clock format [clock seconds]] $msg"
    .t.l insert end "[clock format [clock seconds]] $msg\n"
}

proc log-cmds args {
    foreach cmd $args {
	log "$cmd -> [{*}$cmd]"
    }
}

proc poll-midi-in {} {
    foreach event [midi-in get] {
	puts $event
    }
    set ::data(midi-in-poll) [after 100 poll-midi-in]
}

proc jackchanged {cmd} {
    # puts "jackchanged $cmd"
    switch $cmd {
	start {
	    log-cmds {jack-client register} \
		{midi-in register} \
		{midi-in activate} \
		{midi-in start} \
		{midi-out register} \
		{midi-out activate} \
		{jack-client connect system:midi_capture_1 midi-in:midi_in} \
		{jack-client connect midi-out:midi_out system:midi_playback_1}
	    set data(midi-in-poll) [after 100 poll-midi-in]
	}
	stop {
	    catch {after cancel $::data(midi-in-poll)}
	    log-cmds {midi-in stop} \
		{midi-in deactivate} \
		{midi-in deregister} \
		{midi-out deactivate} \
		{midi-out deregister} \
		{jack-client deregister}
	}
    }
}

pack [ttk::notebook .t] -side top -fill both -expand true
.t add [sdrkit::dial .t.d -command dcommand] -text dial
set data(usb) [sdrkit::startup-usb ::myusb]
set data(alsa) [sdrkit::startup-alsa ::myalsa]
set data(jack) [sdrkit::startup-jack ::myjack -alsa $data(alsa) -onchange jackchanged]
.t add [$data(jack) panel .t.j -onchange jackchanged] -text jack
.t add [$data(alsa) panel .t.a] -text alsa
.t add [$data(usb) panel .t.u] -text usb
.t add [sdrtk::vtext .t.l -scrollbar right -width 20] -text log

log-cmds {sdrtcl::jack-client jack-client} \
    {sdrtcl::midi-tap midi-in} \
    {sdrtcl::midi-insert midi-out}
    
