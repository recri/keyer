#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# Copyright (C) 2018 by Roger E Critchlow Jr, Charlestown, MA, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# use the script location to find the rest of the libraries
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
set dirname [file dirname $script]

#
# append the ../lib directory to the Tcl search path
#
lappend auto_path [file join $dirname .. lib]

#
# utilities
#
proc read-file {file} {
    set fp [open $file r]
    set data [read $fp]
    close $fp
    return $data
}
proc write-file {file data} {
    set fp [open $file w]
    puts -nonewline $fp $data
    close $fp
}

#
# dependencies
#
package require snit
package require morse::itu

#
# morse code transform channel
#
snit::type ascii-to-morse {
    option -dict -default {}
    option -mode -default {} -type {snit::enum -values {read write}}
    
    constructor {args} {
	$self configurelist $args
    }

    method clear {handle} {
	# optional: clear any data stored in internal buffers
    }

    method finalize {handle} {
	# mandatory: called last for the given handle
    }

    method initialize {handle mode} {
	# mandatory: initialize  all parts of the transformation
	return {finalize initialize read write}
    }

    method drain {handle} {
	# optional: return binary data to be pushed upwards
    }

    method limit? {handle} {
	# optional: how many bytes ahead should be read
    }

    method read {handle buffer} {
	# mandatory for readable: 
	puts "read $handle $buffer"
	return $buffer
    }

    method flush {handle} {
	# optional: force data downwards
    }

    method write {handle buffer} {
	# mandatory for writable:
	puts "write $handle $buffer"
	return $buffer
    }

}


#
# mainline
#
proc main {argv} {
    ascii-to-morse ::to-morse -dict [morse-itu-dict] -mode {read}
    chan push stdout ::to-morse
    while {1} {
	if {[gets stdin line] < 0} break
	puts stdout $line
    }
}


main $argv
