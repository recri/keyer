#!/usr/bin/tclsh8.6
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# a generic script for starting sdrkit components by linking their
# name to this script.
# 
set script [info script]

#
# append the ../lib directory to the Tcl search path
#
lappend auto_path [file join [file dirname $script] .. lib]

#
# find the name of the script, without reading links
#
set name [file tail $script]

#
# jack-radio startup:
# 0) process arguments
# 1) pick a list of components
# 2) launch the components
# 3) register the components
# 4) activate the components
# 5) collect rigctld capabilities
#

namespace eval ::main {
    array set data {
	verbose 0
	defaults {
	    radio rx
	}
	radios {
	    rx-cw radio-rx-cw
	    rx-am radio-rx-am
	}
	radio-rx-cw {
	    rf-iq-correct iq-correct
	    if-spectrm spectrum-tap
	    if-lo-mixer lo-mixer
	    if-bpf filter-overlap-save 
	    af-meter meter-tap
	    af-agc agc
	    af-gain gain
	}
	radio-rx-am {
	    rf-iq-correct iq-correct
	    if-spectrm spectrum-tap
	    if-lo-mixer lo-mixer
	    if-bpf filter-overlap-save 
	    af-meter meter-tap
	    af-demod-am demod-am
	    af-agc agc
	    af-gain gain
	}
    }
}

proc ::main::select-radio {radio} {
    variable data
    puts "radios: $data(radios)"
    foreach {key value} $data(radios) {
	if {$radio eq $key} {
	    set data(radio) $data($value)
	    foreach {name component} $data(radio) {
		puts "package require sdrtcl::$component -> [package require sdrtcl::$component]"
		puts "sdrtcl::$component $name -> [sdrtcl::$component $name]"
	    }
	}
    }
    error "$radio not found as possible radio"
}

proc ::main::select-port {port} {
    variable data
}

proc ::main::set-conf {namevalues} {
    foreach namevalue [split $namevalues ,] {
	foreach {name value} [split $namevalue =] break
    }
}

proc ::main::dump-caps {} {
    variable data
}

proc ::main::show-conf {} {
    variable data
}

proc ::main::verbose {} {
    variable data
    incr data(verbose)
}

proc ::main::list {} {
    variable data
}

proc ::main::main {argv} {
    foreach arg $argv {
	switch -glob -- $arg {
	    --radio=* { select-radio [string range $arg 8 end] }
	    --port=* { select-port [string range $arg 7 end] }
	    --set-conf=* { set-conf [string range $arg 11 end] }
	    --dump-caps { dump-caps }
	    --show-conf { show-conf }
	    --verbose { verbose }
	    --list { list }
	    default {
		puts {usage: jack-radio [options ...]}
		foreach {opt splain} {
		    --radio=* {radio to implement}
		    --port=* {port to listen to for control commands}
		    --set-conf=* {set configuration option(s)}
		    --dump-caps {show capabilities}
		    --show-conf {show configuration}
		    --verbose {operate with verbosity}
		    --list {list available radios}
		} {
		    puts "$opt - $splain"
		}
		exit 2
	    }
	}
    }
}

::main::main $argv
