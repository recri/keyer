#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# this script scan the Softrock through a set of frequencies and plots
# the magnitude of the signals found.  Interesting to run with a dummy
# load installed to see where the spurs live.
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk
package require sdrkit::jack
package require sdrkit::audio-tap

array set levels {}
array set data {}

#
# read one buffer of samples compute 10*log10(sum(squared-magnitude)/n)
#
proc get-levels {tap} {
    while {1} {
	# get the frame time and the binary buffer
	lassign [$tap get] frame buffer
	if {$frame != 0} break
	# no data, yet, wait for a buffer
	after $::data(buffer-delay-ms)
    }
    # convert the binary to a list of doubles
    binary scan $buffer f* samples
    # free the binary buffer
    set buffer {}
    # initialize the computation
    set sum2 0
    set n 0
    foreach {i q} $samples {
	set sum2 [expr {$sum2+$i*$i+$q*$q}]
	incr n
    }
    # convert to decibels
    return [expr {10*log10($sum2/$n)}]
}

proc rescale-tag {w tag} {
    set lo $::data(low-f)
    set hi $::data(high-f)
    set min $::data(low-dB)
    set max $::data(high-dB)
    set wd [winfo width $w]
    set ht [winfo height $w]
    $w move $tag [expr {-$lo}] [expr {-$max}]
    $w scale $tag 0 0 [expr {$wd/double($hi-$lo)}] [expr {-$ht/double($max-$min)}]
}

#
# show the frequency and decibel level the cursor is pointing to
#
proc show-freq {w x y} {
    set lo $::data(low-f)
    set hi $::data(high-f)
    set min $::data(low-dB)
    set max $::data(high-dB)
    set wd [winfo width $w]
    set ht [winfo height $w]
    set ::data(cursorf) [format %6.3f [expr {double($lo)+$x/($wd/double($hi-$lo))}]]
    set ::data(cursorl) [format %7.2f [expr {double($max)-$y/($ht/double($max-$min))}]]
}

proc replot-levels {w} {
    set xy {}
    foreach f [lsort -real -increasing [array names ::levels]] {
	set l $::levels($f)
	set l [expr "([join $l +])/[llength $l]"]
	lappend xy $f $l
    }
    if {[llength $xy] > 4} {
	$w coords line $xy
	rescale-tag $w line
    } else {
	$w coords line 0 0 0 0
    }
    $w raise line
}

proc replot-grid {w} {
    $w delete grid
    set lo $::data(low-f)
    set hi $::data(high-f)
    set min $::data(low-dB)
    set max $::data(high-dB)
    set wd [winfo width $w]
    set ht [winfo height $w]
    set dark \#888
    set med \#AAA
    set light \#CCC
    for {set l 0} {$l > -160} {incr l -20} {
	# main db grid
	if {$l >= $min && $l <= $max} {
	    $w create line $lo $l $hi $l -fill $dark -tags grid
	    $w create text $lo $l -text "$l dB" -anchor nw -fill $dark -tags grid
	}
	# sub grid
	for {set ll [expr {$l-2}]} {$ll > $l-20} {incr ll -2} {
	    if {$ll >= $min && $ll <= $max} {
		$w create line $lo $ll $hi $ll -fill $med -tags grid
	    }
	}
    }
    for {set f 0} {$f < 30} {incr f 5} {
	# main freq grid
	if {$f >= $lo && $f <= $hi} {
	    $w create line $f $max $f $min -fill $dark -tags grid
	    $w create text $f $min -text "$f MHz" -anchor sw -fill $dark -tags grid
	}
	# sub grid
	for {set ff [expr {$f+1}]} {$ff < $f+5} {incr ff 1} {
	    if {$ff >= $lo && $ff <= $hi} {
		$w create line $ff $max $ff $min -fill $med -tags grid
		$w create line [expr {$ff-0.5}] $max [expr {$ff-0.5}] $min -fill $light -tags grid
	    }
	}
	for {set ff $f} {$ff < $f+5} {incr ff 1} {
	    if {$ff >= $lo && $ff <= $hi} {
		$w create line [expr {$ff+0.5}] $max [expr {$ff+0.5}] $min -fill $light -tags grid
	    }
	}
    }
    rescale-tag $w grid
}

proc replot {w wd ht} {
    replot-grid $w
    replot-levels $w
}

#
# scan from low to high by step collecting samples samples at each step
#
proc scan-freqs {low high step samples} {
    for {set f $low} {$f <= $high} {set f [expr {$f+$step}]} {
	set ::data(freq) [format %6.3f $f]
	exec usbsoftrock -a set freq $f >& /dev/null
	# allow the buffering long enough to see the new frequency
	after $::data(sampling-delay-ms)
	set avgl 0.0 
	for {set i 0} {$i < $samples} {incr i} {
	    set l [get-levels tap]
	    if {$l < -200} {
		incr i -1
		continue
	    }
	    # puts "avg $avgl $l"
	    set avgl [expr {$avgl+$l/double($samples)}]
	}
	set ::data(level) [format %7.2f $avgl]
	lappend ::levels($f) $avgl
	# puts "$::data(freq) $::data(level)"
	replot-levels .c
	update
    }
}

proc antenna-scan {w} {
    incr ::data(n-scan)
    $w configure -text scanning -state disabled
    for {set j 0} {$j < $::data(loops)} {incr j} {
	scan-freqs $::data(low-f) $::data(high-f) $::data(step-f) $::data(samples)
    }
    $w configure -text rescan -state normal
}

proc main {argv} {
    array set ::data {
	low-f 1.5
	high-f 30.0
	step-f 0.01
	low-dB -100
	high-dB -50
	loops 1
	samples 20
    }
    foreach {opt value} $argv {
	switch -- $opt {
	    --title {
		# window title so screen snaps are identified
		wm title . $value
	    }
	    --lo {
		# low frequency for scan
		set ::data(low-f) $value
	    }
	    --hi {
		# high frequency for scan
		set ::data(high-f) $value
	    }
	    --step {
		# frequency step for scan
		set ::data(step-f) $value
	    }
	    --samples {
		# number of samples to average at each frequency
		set ::data(samples) $value
	    }
	    --lo-dB {
		# lowest level to display
		set ::data(low-dB) $value
	    }
	    --hi-dB {
		# highest level to display
		set ::data(high-dB) $value
	    }
	    --loops {
		# number of loops to perform
		set ::data(loops) $value
	    }
	    default { error "unknown option: $opt" }
	}
    }
    #
    # get the jack sample rate
    #
    set ::data(sample-rate) [sdrkit::jack sample-rate]
    #
    # configure the audio tap to maintain 2^3 buffers of 2^12 samples each
    # with the IQ samples interleaved in complex format
    # so each tap get will fetch 4096 audio samples
    # from the least recently filled buffer of 8
    #
    sdrkit::audio-tap tap -log2n 3 -log2size 12 -complex 1
    #
    # the delay for one buffer to fill
    #
    set ::data(buffer-delay-ms) [expr {int(1000.0*pow(2,12)/$::data(sample-rate))}]
    #
    # the delay for all buffers to fill after changing frequency
    #
    set ::data(sampling-delay-ms) [expr {int(1000.0*pow(2,3)*pow(2,12)/$::data(sample-rate))}]
    #
    # connect the audio tap to the system capture device
    #
    sdrkit::jack connect system:capture_1 tap:in_i
    sdrkit::jack connect system:capture_2 tap:in_q
    #
    # start the tap collecting samples
    #
    tap start
    #
    # user interface
    #

    # suggested overall geometry
    wm geometry . 1200x440
    
    # canvas for graphical display of spectrum
    pack [canvas .c] -side top -fill both -expand true
    .c create line 0 0 0 0 -fill black -tags line
    bind .c <Motion> [list show-freq .c %x %y]
    bind .c <Configure> [list replot .c %w %h]

    # frame for buttons and labels
    pack [ttk::frame .m] -side top -fill x

    # rescan button
    pack [ttk::button .m.s -text scan -command [list antenna-scan .m.s]] -side left

    # scan number
    pack [ttk::label .m.sl -text { scan }] -side left
    pack [ttk::label .m.sv -textvar ::data(n-scan)] -side left

    # plan summary
    pack [ttk::label .m.plan -textvar ::data(plan)] -side left
    set ::data(plan)  [format { from %.3f MHz to %.3f MHz step %.3f MHz %d samples/step} $::data(low-f) $::data(high-f) $::data(step-f) $::data(samples)] 

    # last computed frequency and level
    pack [ttk::label .m.fl -text { at: }] -side left
    pack [ttk::label .m.fv -textvar ::data(freq)] -side left
    pack [ttk::label .m.fu -text { MHz }] -side left
    pack [ttk::label .m.ll -text { level: }] -side left
    pack [ttk::label .m.lv -textvar ::data(level)] -side left
    pack [ttk::label .m.lu -text { dB }] -side left

    # identify frequency and level under the cursor
    pack [ttk::label .m.cfl -text { cursor: }] -side left
    pack [ttk::label .m.cfv -textvar ::data(cursorf)] -side left
    pack [ttk::label .m.cfu -text { MHz }] -side left
    pack [ttk::label .m.cll -text { and }] -side left
    pack [ttk::label .m.clv -textvar ::data(cursorl)] -side left
    pack [ttk::label .m.clu -textvar { dB }] -side left
    
    # start the first scan loop
    antenna-scan .m.s
}

main $argv
