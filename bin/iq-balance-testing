#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk
package require panorama
package require sdrkit
package require sdrkit::jack
package require sdrkit::oscillator
## package require sdrkit::oscillator-zd
package require sdrkit::noise
package require sdrkit::iq-noise
package require sdrkit::iq-balance
package require sdrkit::iq-correct


#
# just make an oscillator and some noise
# an iq-balance to unbalance the oscillator
# and an iq-correct to rebalance the oscillator
#

array set data {
    server default
    name osc
    length 320
    freq 600.0
    min-freq -23500
    max-freq 23500
    gain -75.0
    min-gain -130.0
    max-gain 0.0
    iq-sine 0.0
    iq-gain 0.0
    noise -100.0
    iq-noise -100.0
    corrector-on 0
    corrector-mu 0.25
    corrector-wi 0.00
    corrector-wq 0.00
    corrector-dwi 0.00
    corrector-dwq 0.00
    corrector-mz 0.00
    autotune-on 0
    autotune-initial-mu 0.125
    autotune-dir ---
    autotune-mag ---
    autotune-mu ---
}

namespace eval ::meters {}

##
## meter the possible iq balancing signals
## this is plotting the transform applied
## to incoming iq signals
##
proc ::meters::update {w} {
    upvar #0 ::meters::$w data
    foreach {wi wq dwi dwq mz} [iq-correct get] break
    set xy {}
    foreach {t ct st} $data(theta-cos-sin) {
	lappend xy [expr {$ct - $wi * $st}] [expr {$st - $wq * $ct}]
    }
    $w coords xyplot $xy
    $w scale xyplot 0 0 75 -75
    $w move xyplot 125 125
    after 10 [list ::meters::update $w]
}

proc ::meters::setup {w n} {
    upvar #0 ::meters::$w data
    set data(n-theta) $n
    set data(theta-cos-sin) {}
    set pi [expr {atan2(0,-1)}]
    for {set i 0} {$i <= $n} {incr i} {
	set theta [expr {2*$pi*$i/$n}]
	lappend data(theta-cos-sin) $theta [expr {cos($theta)}] [expr {sin($theta)}]
    }
    catch {$w delete all}
    $w create line {0 0 0 0} -fill white -tags xyplot
}
proc ::meters {w args} {
    upvar #0 ::meters::$w data
    canvas $w -bg black -width 250 -height 250
    ::meters::setup $w 32
    return $w
}

##
## controllers for the input signal, unbalancing, and rebalancing components
##
proc dB2linear {dB} { return [expr {pow(10, $dB/20)}] }

proc set-gain {v} {
    osc configure -gain $v
    set ::data(gain-label) [format %.1f $v]
}

proc set-freq {v} {
    if {$v == 0} { set v 10 }
    osc configure -freq $v
    set ::data(freq-label) [format %.1f $v]
}

proc set-noise {v} {
    noise configure -level $v
    set ::data(noise-label) [format %.1f $v]
}

proc set-iq-noise {v} {
    iq-noise configure -level $v
    set ::data(iq-noise-label) [format %.1f $v]
}

proc set-iq-sine-phase {v} {
    iq-balance configure -sine-phase [expr {sin([sdrkit::radians $v])}]
    set ::data(iq-sine-label) [format %6.2f $v]
}
proc set-iq-gain {v} {
    iq-balance configure -linear-gain [sdrkit::dB-to-linear $v]
    set ::data(iq-gain-label) [format %6.2f $v]
}

proc more-mu {} {
    set ::data(corrector-mu) [expr {2*$::data(corrector-mu)}]
    set ::data(label-corrector-mu) [format %.13f $::data(corrector-mu)]
    iq-correct configure -mu $::data(corrector-mu)
}
proc less-mu {} {
    set ::data(corrector-mu) [expr {$::data(corrector-mu)/2}]
    set ::data(label-corrector-mu) [format %.13f $::data(corrector-mu)]
    iq-correct configure -mu $::data(corrector-mu)
}
proc reset-ws {} {
    iq-correct reset
}
proc update-ws {} {
    foreach {wi wq dwi dwq mz} [iq-correct get] break
    if {[catch {
	foreach v {wi wq dwi dwq} {
	    set ::data(corrector-$v) [expr {($::data(corrector-$v)+[set $v])/2}]
	    set ::data(label-corrector-$v) [format %.10g $::data(corrector-$v)]
	}
    } error]} {
	puts "$error"
	if {$::data(corrector-on)} {
	    corrector-onoff
	}
    }
    after 20 [list update-ws]
}
##
## okay, the issue is that the adaptive filter mu is the learning rate
## there is a critical value of mu, above critical the filter goes chaotic
## just below critical we get oscillations, further below learns unconditionally,
## too far below takes a while
## the critical value of mu depends on the input signal level
proc autotune-ws {} {
    if {$::data(autotune-on)} {
	foreach {wi wq dwi dwq mz} [iq-correct get] break
	set magw [expr {sqrt(pow($wi,2)+pow($wq,2))}]
	set dwi [expr {$wi-$::data(autotune-last-wi)}]
	set dwq [expr {$wq-$::data(autotune-last-wq)}]
	set mag [expr {sqrt(pow($dwi,2)+pow($dwq,2))}]
	if {$mag > 0} {
	    set dwi [expr {$dwi/$mag}]
	    set dwq [expr {$dwq/$mag}]
	    set cos [expr {$dwi*$::data(autotune-last-dwi)+$dwq*$::data(autotune-last-dwq)}]
	    if {$cos > 0.7 && $mag/$magw < 0.05} {
		set mu [expr {[iq-correct cget -mu]*2}]
		set ::data(autotune-mu) [format %.5g $mu]
		iq-correct configure -mu $mu
	    } elseif {[iq-correct cget -mu] > 1.0/32.0} {
		set mu [expr {[iq-correct cget -mu]/2}]
		set ::data(autotune-mu) [format %.5g $mu]
		iq-correct configure -mu $mu
	    }
	    set dir [expr {int(180*atan2($dwq,$dwi)/atan2(0,-1))}]
	    set mag [format %.5g [expr {$mag/$magw}]]
	    array set ::data [list autotune-dir $dir autotune-mag $mag autotune-last-wi $wi autotune-last-wq $wq autotune-last-dwi $dwi autotune-last-dwq $dwq autotune-cos $cos]
	}
	after 20 [list autotune-ws]
    }
}
proc autotune-onoff {} {
    if {$::data(autotune-on)} {
	#puts "iq-correct reset to -mu $::data(corrector-mu)"
	iq-correct reset
	set ::data(autotune-mu) $::data(autotune-initial-mu)
	iq-correct configure -mu $::data(autotune-mu)
	array set ::data {autotune-last-wi 0 autotune-last-wq 0 autotune-last-dwi 0 autotune-last-dwq 0 autotune-dir 0 autotune-mag 0}
	autotune-ws
    } else {
	#puts "iq-correct muted to 0"
	iq-correct reset
	iq-correct configure -mu 0
	array set ::data {autotune-dir --- autotune-mag --- }
    }
}
proc corrector-onoff {} {
    if {$::data(corrector-on)} {
	#puts "iq-correct reset to -mu $::data(corrector-mu)"
	iq-correct reset
	iq-correct configure -mu $::data(corrector-mu)
    } else {
	#puts "iq-correct muted to 0"
	iq-correct configure -mu 0
	iq-correct reset
    }
}

proc shutdown {w} {
    if {$w eq {.}} {
	rename osc {}
	rename noise {}
	rename iq-noise {}
	rename iq-balance {}
	rename iq-correct {}
    }
}

proc main {argv} {
    if {$::data(max-freq) > [sdrkit::jack sample-rate]/4} {
	set ::data(max-freq) [expr {[sdrkit::jack sample-rate]/4.01}]
    }
    foreach {option value} $argv {
	switch -- $option {
	    -n - -name - --name { set ::data(name) $value }
	    -s - -server - --server { set ::data(server) $value }
	    -l - -length - --length { set ::data(length) $value }
	    -f - -freq - --freq - -frequency - --frequency { set ::data(freq) $value }
	    -min-freq - --min-freq { set ::data(min-freq) $value }
	    -max-freq - --max-freq { set ::data(max-freq) $value }
	    -g - -gain - --gain { set ::data(gain) $value }
	    -min-gain - --min-gain { set ::data(min-gain) $value }
	    -max-gain - --max-gain { set ::data(max-gain) $value }
	    default { error "unknown option \"$option\"" }
	}
    }

    sdrkit::oscillator osc
    ## sdrkit::oscillator-zd osc
    sdrkit::noise noise
    sdrkit::iq-noise iq-noise
    sdrkit::iq-balance iq-balance
    sdrkit::iq-correct iq-correct
    
    wm title . sdrkit:balancer
    set-gain $::data(gain)
    set-freq $::data(freq)
    set-noise $::data(noise)
    set-iq-noise $::data(iq-noise)

    set row 0
    grid [panorama .pan -width 1024] -row $row -column 0 -columnspan 6 -sticky nsew
    incr row
    grid [ttk::label .b$row -text {Oscillator}] -row $row -column 0 -columnspan 3
    incr row
    grid [ttk::label .gain-l -textvar ::data(gain-label) -width 10 -anchor e] -row $row -column 0
    grid [ttk::label .gain-u -text dB] -row $row -column 1
    grid [ttk::scale .gain-s -from $::data(max-gain) -to $::data(min-gain) -command set-gain -variable ::data(gain) -length $::data(length)] -row $row -column 2 -sticky ew
    incr row
    grid [ttk::label .freq-l -textvar ::data(freq-label) -width 10 -anchor e] -row $row -column 0
    grid [ttk::label .freq-u -text Hz] -row $row -column 1
    grid [ttk::scale .freq-s -from $::data(min-freq) -to $::data(max-freq) -command set-freq -variable ::data(freq) -length $::data(length)] -row $row -column 2 -sticky ew
    incr row
    grid [ttk::label .b$row -text {Noise}] -row $row -column 0 -columnspan 3
    incr row
    grid [ttk::label .noise-l -textvar ::data(noise-label) -width 10 -anchor e] -row $row -column 0
    grid [ttk::label .noise-u -text dB] -row $row -column 1
    grid [ttk::scale .noise-s -from $::data(max-gain) -to $::data(min-gain) -command set-noise -variable ::data(noise) -length $::data(length)] -row $row -column 2 -sticky ew
    incr row
    grid [ttk::label .b$row -text {IQ Noise}] -row $row -column 0 -columnspan 3
    incr row
    grid [ttk::label .iq-noise-l -textvar ::data(iq-noise-label) -width 10 -anchor e] -row $row -column 0
    grid [ttk::label .iq-noise-u -text dB] -row $row -column 1
    grid [ttk::scale .iq-noise-s -from $::data(max-gain) -to $::data(min-gain) -command set-iq-noise -variable ::data(iq-noise) -length $::data(length)] -row $row -column 2 -sticky ew
    incr row
    grid [ttk::label .b$row -text {Unbalancer}] -row $row -column 0 -columnspan 3
    incr row
    grid [ttk::label .sine$row-l -textvar ::data(iq-sine-label) -width 10 -anchor e] -row $row -column 0
    grid [ttk::label .sine$row-u -text {deg}] -row $row -column 1
    grid [ttk::scale .sine$row-s -from -45.0 -to 45.0 -command set-iq-sine-phase -variable ::data(iq-sine) -length $::data(length)] -row $row -column 2 -sticky ew
    incr row
    grid [ttk::label .gain$row-l -textvar ::data(iq-gain-label) -width 10 -anchor e] -row $row -column 0
    grid [ttk::label .gain$row-u -text {dB}] -row $row -column 1
    grid [ttk::scale .gain$row-s -from -30.00 -to 30.00 -command set-iq-gain -variable ::data(iq-gain) -length $::data(length)] -row $row -column 2 -sticky ew
    incr row
    grid [ttk::label .blk$row -text {Corrector}] -row $row -column 0 -columnspan 3
    incr row
    grid [ttk::frame .blk$row] -row $row -column 0 -columnspan 3
    foreach item {mu wi wq dwi dwq} {
	pack [ttk::label .blk$row.l-$item -text $item] -side left
	pack [ttk::label .blk$row.v-$item -textvariable ::data(label-corrector-$item) -width 15] -side left
	set ::data(label-corrector-$item) [format %.13f $::data(corrector-$item)]
    }
    incr row
    grid [ttk::frame .blk$row] -row $row -column 0 -columnspan 3
    pack [ttk::checkbutton .blk$row.onoff -text {Enable} -variable ::data(corrector-on) -onvalue 1 -offvalue 0 -command corrector-onoff] -side left
    pack [ttk::button .blk$row.more-mu -text {Less mu} -command [list less-mu]] -side left
    pack [ttk::button .blk$row.less-mu -text {More mu} -command [list more-mu]] -side left
    pack [ttk::button .blk$row.reset-ws -text {Reset wi/wq} -command [list reset-ws]] -side left
    incr row
    grid [ttk::frame .blk$row] -row $row -column 0 -columnspan 3
    pack [ttk::checkbutton .blk$row.onoff -text {Autotune} -variable ::data(autotune-on) -onvalue 1 -offvalue 0 -command autotune-onoff] -side left
    foreach v {dir mag cos mu} {
	pack [ttk::label .blk$row.l$v -text $v] -side left
	pack [ttk::label .blk$row.v$v -textvariable ::data(autotune-$v) -width 15] -side left
    }
    set row 1
    grid [meters .blk$row] -row $row -column 3 -columnspan 3 -rowspan 10
    ::meters::update .blk$row
    grid columnconfigure . 2 -weight 100
    grid columnconfigure . 5 -weight 100
    grid rowconfigure . 0 -weight 100

    sdrkit::jack connect osc:out_i iq-balance:in_i
    sdrkit::jack connect osc:out_q iq-balance:in_q
    sdrkit::jack connect noise:out_i iq-balance:in_i
    sdrkit::jack connect noise:out_q iq-balance:in_q
    sdrkit::jack connect iq-noise:out_i iq-balance:in_i
    sdrkit::jack connect iq-noise:out_q iq-balance:in_q
    sdrkit::jack connect iq-balance:out_i iq-correct:in_i
    sdrkit::jack connect iq-balance:out_q iq-correct:in_q
    sdrkit::jack connect iq-correct:out_i capture_spectrum_1:in_i
    sdrkit::jack connect iq-correct:out_q capture_spectrum_1:in_q
    sdrkit::jack connect iq-correct:out_i system:playback_1
    sdrkit::jack connect iq-correct:out_q system:playback_2
    corrector-onoff
    update-ws
    bind . <Destroy> [list shutdown %W]
}

main $argv
