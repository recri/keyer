#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# an sdrkit embeddable oscillator
#

#
# find the script file
# and add the lib directory to the automatic package search path
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

#
# require Tk for graphical UI and communications
# sdrtcl::jack for sample rate
# sdrtcl::oscillator to implement the oscillator
#
package require Tk
package require sdrtcl::jack
package require sdrtcl::oscillator

#
# on the fly implementation of control interface
#
package require snit

namespace eval sdrtcl {}

snit::widget sdrtcl::sdrkit {
    hulltype toplevel

    # the tk appname and jack client name
    # used to "send" commands to this component
    # used as the jack client name or as the root jack
    #   client name if more than one client is active
    option -name -default sdrkit -readonly true

    # the jack server name to create clients
    option -server -default default -readonly true

    # do not instantiate a user interface
    option -no-window -default false -readonly true

    # the tk appname of the control application
    # used to "send" commands to the control component 
    option -control -default {} -readonly true

    # the tk grid parameters for the standard ui stack
    # which displays a stack of windows in a single toplevel
    # frame.
    # these are the minimum sizes and weights
    # for columns 0 and 1 in a grid display
    # column 0 displays the option value with units
    # column 1 displays the scale for adjusting the value
    # other controls are generally centered in a column
    # spanning these two.
    option -minsizes -default {100 200} -configuremethod Configure
    option -weights -default {1 3} -configuremethod Configure

    option -enable -default false -configuremethod Configure
    option -activate -default false -configuremethod Configure
    option -out-ports -default {} -configuremethod Configure
    option -in-ports -default {} -configuremethod Configure
    option -out-controls -default {} -configuremethod Configure
    option -in-controls -default {} -configuremethod Configure

    constructor {args} {
	$self configure {*}$args
    }

    method DoConfigure {opt val} { set options($opt) $val }

    method {Configure -minsizes} {val} { DoConfigure -minsizes $val }
    method {Configure -weights} {val} { DoConfigure -weights $val }
    method {Configure -enable} {val} { DoConfigure -enable $val }
    method {Configure -activate} {val} { DoConfigure -activate $val }
    method {Configure -out-ports} {val} { DoConfigure -out-ports $val }
    method {Configure -in-ports} {val} { DoConfigure -in-ports $val }
    method {Configure -out-controls} {val} { DoConfigure -out-controls $val }
    method {Configure -in-controls} {val} { DoConfigure -in-controls $val }
}
    
namespace eval sdrkit {}

snit::type sdrkit::oscillator {    
    option -server -default default -readonly true
    option -sample-rate -default 0 -readonly true
    option -name -default sdr-osc -readonly true
    option -minsizes -default {100 200} -readonly true
    option -weights -default {1 3} -readonly true
    option -control -default {} -readonly true
    option -enable -default 1 -configuremethod Configure
    option -activate -default 1 -configuremethod Configure

    option -freq -default 600.0 -configuremethod Configure
    option -min-freq -default -23500 -configuremethod Configure
    option -max-freq -default  23500 -configuremethod Configure
    option -gain -default -30.0 -configuremethod Configure
    option -min-gain -default -160.0 -configuremethod Configure
    option -max-gain -default 0.0 -configuremethod Configure

    variable data -array {
	gain-label {}
	freq-label {}
    }

    method sample-rate {} { return [sdrtcl::jack -server $options(-server) sample-rate] }

    constructor {args} {
	set options(-server) [from args -server default]
	set options(-sample-rate) [$self sample-rate]
	set options(-min-freq) [expr {-$options(-sample-rate)/4.0}]
	set options(-max-freq) [expr { $options(-sample-rate)/4.0}]

	$self configure {*}$args

	wm title . $options(-name)
	tk appname $options(-name)

	sdrtcl::oscillator $options(-name) -server $options(-server) -freq $options(-freq) -gain $options(-gain)

	if {$options(-control) ne {}} {
	    set options(-enable) 0
	    set options(-activate) 0
	    if {[$options(-name) is-active]} { $options(-name) deactivate }
	} else {
	    set options(-enable) 1
	    set options(-activate) 1
	    if { ! [$options(-name) is-active]} { $options(-name) activate }
	}

	ttk::label .gain-l -textvar [myvar data(gain-label)] -width 10 -anchor e
	ttk::scale .gain-s -from $options(-max-gain) -to $options(-min-gain) -command [mymethod Set gain] -variable [myvar options(-gain)]
	$self Set gain $options(-gain)
	grid .gain-l .gain-s -sticky ew

	ttk::label .freq-l -textvar [myvar data(freq-label)] -width 10 -anchor e
	ttk::scale .freq-s -from $options(-min-freq) -to $options(-max-freq) -command [mymethod Set freq] -variable [myvar options(-freq)]
	$self Set freq $options(-freq)
	grid .freq-l .freq-s -sticky ew

	set col -1
	foreach ms $options(-minsizes) wt $options(-weights) {
	    grid columnconfigure . [incr col] -minsize $ms -weight $wt
	}
    }
    destructor {
	catch {$options(-name) deactivate}
	catch {rename $options(-name) {}}
    }
    method Configure {opt val} {
	set options($opt) $val
	switch -- $opt {
	    -activate { $options(-name) [expr {$val?{activate}:{deactivate}}] }
	    -min-freq { set options($opt) [expr {max($options($opt),-$options(-sample-rate)/4.0)}] }
	    -max-freq { set options($opt) [expr {min($options($opt), $options(-sample-rate)/4.0)}] }
	}
    }
    method {Set gain} {v} {
	$options(-name) configure -gain $v
	set data(gain-label) [format {%.1f dBFS} $v]
    }
    method {Set freq} {v} {
	$options(-name) configure -freq $v
	set data(freq-label) [format {%.1f Hz} $v]
    }
}

sdrkit::oscillator ::sdrkit {*}$argv
