#!/usr/bin/wish8.6
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# Copyright (C) 2018 by Roger E Critchlow Jr, Charlestown, MA, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# use the script location to find the rest of the libraries
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
set dirname [file dirname $script]

#
# append the ../lib directory to the Tcl search path
#
lappend auto_path [file join $dirname .. lib]

package require sdrtk::graph

pack [sdrtk::graph .c] -fill both -expand true

bind .c <3> [list options-menu %W %X %Y]

set curves {sine cosine sawtooth up down constant dits dits2}
foreach c $curves { set origin($c) {587448292 0} }

set dits {
    1151637283 20 1151637283 0 1151669346 0 1151669346 20 1151672946 20 
    1151672946 0 1151676546 0 1151676546 20 1151680146 20 1151680146 0
    1151683746 0 1151683746 20 1151687346 20 1151687346 0 1151743954 0
    1151743954 20 1151747554 20 1151747554 0 1151762371 0 1151762371 20
    1151765971 20 1151765971 0 1151769571 0 1151769571 20 1151773171 20
    1151773171 0 1151789844 0 1151789844 20 1151793444 20 1151793444 0
    1151797044 0 1151797044 20 1151800644 20 1151800644 0 1151845892 0 
    1151845892 20 1151849492 20 1151849492 0 1151867556 0 1151867556 20
    1151878356 20 1151878356 0 1151881956 0 1151881956 20 1151885556 20
    1151885556 0 1151889156 0 1151889156 20 1151899956 20 1151899956 0
    1151903556 0 1151903556 20 1151907156 20 1151907156 0 1151910756 0
    1151910756 20 1151914356 20 1151914356 0 1151939637 0 1151939637 20 
    1151943237 20 1151943237 0 1151957793 0 1151957793 20 1151961393 20
    1151961393 0 1151964993 0 1151964993 20 1151968593 20 1151968593 0
    1151972193 0 1151972193 20 1151982993 20 1151982993 0 
}

set dits2 {
    1172043464 20 1172043464 0 1172083365 0 1172083365 20 1172086965 20
    1172086965 0 1172097765 0 1172097765 20 1172101365 20 1172101365 0
    1172112165 0 1172112165 20 1172115765 20 1172115765 0 1172119365 0
    1172119365 20 1172122965 20 1172122965 0 1172137225 0 1172137225 20
    1172140825 20 1172140825 0 1172144425 0 1172144425 20 1172148025 20
    1172148025 0 1172151625 0 1172151625 20 1172155225 20 1172155225 0
    1172168266 0 1172168266 20 1172171866 20 1172171866 0 1172175466 0
    1172175466 20 1172179066 20 1172179066 0 1172182666 0 1172182666 20
    1172186266 20 1172186266 0 1172197066 0 1172197066 20 1172200666 20
    1172200666 0 1172211466 0 1172211466 20 1172215066 20 1172215066 0
    1172218666 0 1172218666 20 1172222266 20 1172222266 0 1172237991 0
    1172237991 20 1172248791 20 1172248791 0 1172252391 0 1172252391 20
    1172255991 20 1172255991 0 1172259591 0 1172259591 20 1172270391 20
    1172270391 0 1172273991 0 1172273991 20 1172277591 20 1172277591 0
    1172281191 0 1172281191 20 1172284791 20 1172284791 0 1172288391 0
    1172288391 20 1172291991 20 1172291991 0 1172295591 0 1172295591 20
    1172299191 20 1172299191 0 1172309991 0 1172309991 20 1172313591 20
    1172313591 0 1172317191 0 1172317191 20 1172327991 20 1172327991 0
    1172331591 0 1172331591 20 1172335191 20 1172335191 0    
}

proc options-menu {win x y} {

    if {[winfo exists $win.m]} { destroy $win.m }
    menu $win.m -tearoff no
    $win.m add command -label {Clear window} -command [list $win delete all]
    $win.m add separator
    foreach d $::curves {
	$win.m add command -label $d -command [list draw $win $d]
    }
    tk_popup $win.m $x $y
}

proc draw {win curve} {
    if { ! [$win exists line $curve]} {
	$win add line $curve {*}[points $curve]
    } else {
	$win line add point $curve {*}[more-points $curve]
    }
}

proc points {curve} {
    if {$curve eq {dits}} { return $::dits }
    if {$curve eq {dits2}} { return $::dits2 }
    set ::origin($curve) {587448292 0}
    return [more-points $curve]
}
proc more-points {curve} {
    if {$curve eq {dits}} { return $::dits }
    if {$curve eq {dits2}} { return $::dits2 }
    foreach {xo yo} $::origin($curve) break
    set points {}
    for {set i 0} {$i < 1000} {incr i} {
	set x [expr {$xo+$i*0.01}]
	switch $curve {
	    sine { set y [expr {sin($x)}] }
	    cosine { set y [expr {cos($x)}] }
	    sawtooth { for {set y $x} {$y > 1} {set y [expr {$y-1}]} {} }
	    up { set y $x }
	    down { set y -$x }
	    constant { set y 0 }
	    default { error "unmatched curve $curve" }
	}
	lappend points $x $y
    }
    set ::origin($curve) [list $x $y]
    return $points
}
