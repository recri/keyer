#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk

package require sdrkit
package require sdrkit::jack

package require input-block-control
package require lo-mixer-control
package require band-pass-control
package require demod-block-control
package require panorama-control

#
# an sdr as a pipeline
# capture | iq-correct | lo-mixer | filter-complex-bandpass | gain | demod | playback
# one or more spectrum/waterfall/meter displays that can be tapped into the pipeline
# at any point.
# noise reduction and additional filtering can be added at any point.
#

array set data {
    server default
    name osc
    length 320
    freq 600.0
    min-freq -23500
    max-freq 23500
    gain -75.0
    min-gain -130.0
    max-gain 0.0
    iq-sine 0.0
    iq-gain 0.0
    noise -100.0
    iq-noise -100.0
}

namespace eval ::meters {}

proc shutdown {w} {
    if {$w eq {.}} {
    }
}

proc main {argv} {
    if {$::data(max-freq) > [sdrkit::jack sample-rate]/4} {
	set ::data(max-freq) [expr {[sdrkit::jack sample-rate]/4.01}]
    }
    foreach {option value} $argv {
	switch -- $option {
	    -n - -name - --name { set ::data(name) $value }
	    -s - -server - --server { set ::data(server) $value }
	    -l - -length - --length { set ::data(length) $value }
	    -f - -freq - --freq - -frequency - --frequency { set ::data(freq) $value }
	    -min-freq - --min-freq { set ::data(min-freq) $value }
	    -max-freq - --max-freq { set ::data(max-freq) $value }
	    -g - -gain - --gain { set ::data(gain) $value }
	    -min-gain - --min-gain { set ::data(min-gain) $value }
	    -max-gain - --max-gain { set ::data(max-gain) $value }
	    default { error "unknown option \"$option\"" }
	}
    }
    
    wm title . sdrkit:radio
    
    toplevel .p
    wm title .p sdrkit:panorama
    pack [panorama-control .p.an] -fill both -expand true

    set row 0
    grid [input-block-control .inp -name input] -row $row -column 0 -sticky ew
    incr row
    grid [lo-mixer-control .lom -name lo-mixer -freq 10000] -row $row -column 0 -sticky ew
    incr row
    grid [band-pass-control .bpf -name bpf] -row $row -column 0 -sticky ew
    incr row
    grid [demod-block-control .dem -name demod] -row $row -column 0 -sticky ew
    incr row
    
    sdrkit::jack connect system:capture_1 input:in_q
    sdrkit::jack connect system:capture_2 input:in_i
    sdrkit::jack connect input:out_i lo-mixer:in_i
    sdrkit::jack connect input:out_q lo-mixer:in_q
    sdrkit::jack connect lo-mixer:out_i bpf:in_i
    sdrkit::jack connect lo-mixer:out_q bpf:in_q
    sdrkit::jack connect bpf:out_i demod:in_i
    sdrkit::jack connect bpf:out_q demod:in_q
    sdrkit::jack connect demod:out_i system:playback_1
    sdrkit::jack connect demod:out_q system:playback_2

    sdrkit::jack connect input:out_i capture_spectrum_1:in_i
    sdrkit::jack connect input:out_q capture_spectrum_1:in_q
    
    set ::data(buffer-size) [sdrkit::jack buffer-size]
    set ::data(sample-rate) [sdrkit::jack sample-rate]
    
    bind . <Destroy> [list shutdown %W]
}

main $argv
