#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2019 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk
package require snit

#
# multichannel oscilloscope
#
# * Tk interface
# * embeddable in a Tk application
# * OSC controllable
# * keyboard accelerated
# * arbitrary number of scopes
# * arbitrary number of channels
# * source channels from
# ** scripts
# ** files
# ** jack audio ports
# ** jack midi ports
# ** ALSA, pulse audio, or PortAudio ports
# * channels can be configured for
# ** color
# ** alpha (not yet)
# ** textures (well, dashes and dots)
# * channels have independent 
# ** gain
# ** offset
# * channels have independent sample format
# * channel data stored in OpenGL memory
# * gain, offset, color, alpha, and zoom all handled in OpenGL
# * the scopes run the same time base which can be zoomed in and out
#
# pulling the basic spec from xoscope which looks very thorough but out of date
# in the sources it can connect to.
#
# From Tektronix XYZ of oscilloscopes:
# Examples of fully automated waveform measurements:
#  Period             | Duty Cycle + | High
#  Frequency          | Duty Cycle - | Low
#  Width +            | Delay        | Minimum
#  Width -            | Phase        | Maximum
#  Rise time          | Burst width  | Overshoot +
#  Fall time          | Peak-to-peak | Overshoot -
#  Amplitude          | Mean         | RMS
#  Extinction ratio   | Cycle mean   | Cycle RMS
#  Mean optical power | Cycle area   | Jitter
#
# work without jack for the time being so I can work while on the road, so
# specialize in scripted or filed sources for the moment.
#
# but I need to build the Tcl channel which is the read side of a jack ringbuffer,
# so I can use fileevent to service jack ports as a sink.
#
# well, I already have sdrtcl::audio-tap and sdrtcl::midi-tap, so what else do
# I need?
#

snit::type channel {
}
snit::type tcl-channel {
}
snit::type file-channel {
}
snit::type jack-channel {
}

snit::type oscilloscope {
}

proc main {argv} {
}

main $argv
