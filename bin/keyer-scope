#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2019 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# use the script location to find the rest of the libraries
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
set dirname [file dirname $script]

#
# append the ../lib directory to the Tcl search path
#
lappend auto_path [file join $dirname .. lib]

#
# require some packages
#
package require Tk
package require snit
package require sdrtk::dial
#
# multichannel oscilloscope
#
# working from the panel on page 19 of XYZ of Oscilloscopes
#
# component scope
# method autoset
# method default-setup momentary-button
# method print button
# method run-stop
# method single
# method clear
# ?-scope-fast-acquisition
# ?-scope-intensity
#
# ?-scope-multi-a (push fine)
# ?-scope-multi-b (push fine)
# ?-scope-touch-screen-disable
#
# component horizontal
# ?-zoom
# ?-cursors
# ?-search
# ?-mark-left
# ?-mark-right
# ?-set-clear
#
# option -position (t/div)/100
# ?-delay t
# ?-resolution (more samples)
# option -scale t/div
#
# component trigger
# ?-edge
# ?-advanced
# ? https://www.picotech.com/library/oscilloscopes/advanced-digital-triggers
# option -source {Ch?} spinner
# option -slope {Pos Neg} toggle  } simple edge triggering
# option -level (push for 50%)    }
# option -mode {None Normal|Repeat Auto Single} radiobutton
# ?option -coupling
# option -holdoff
# method force
#
# component vertical
# option -ch?-enable
# option -ch?-position (push offset)
# option -ch?-scale volts/div
# ?option -ch?-coupling {ac dc gnd} 
# ?option -ch?-10x
# option -ch?-color
# option -ch?-label
# option -ch?-source
#
namespace eval ::sdrtcl { }
namespace eval ::sdrtcl::scope {}

proc rgb {r g b} {
    return [expr {(($r&255)<<16)|(($g&255)<<8)|($b&255)}]
}

# conservative color palette adapted for color blindness
# Bang Wong, Points of view: Color blindness.
# Nature Methods: volume 8, page 441 (2011)
set ::sdrtcl::scope::colors [dict create \
				black [rgb 0 0 0] \
				orange [rgb 230 159 0] \
				skyblue [rgb 86 180 233] \
				bluishgreen [rgb 0 158 115] \
				yellow [rgb 240 228 66] \
				blue [rgb 0 114 178] \
				vermillion [rgb 213 94 0] \
				reddishpurple [rgb 204 121 167] \
				white [rgb 255 255 255] \
			       ]
proc ::sdrtcl::scope::get-channel-color {c} {
    return [format \#%06x [lindex $::sdrtcl::scope::colors [expr {2*$c+1}]]]
    
}

# channels
snit::enum ::sdrtcl::scope::channels -values {1 2 3 4 5 6 7 8}
# set of volts per major division
snit::enum ::sdrtcl::scope::volts-per-div -values {
    1mV/div 2mV/div 5mV/div 10mV/div 20mV/div 50mV/div 0.1V/div 0.2V/div 0.5V/div 1V/div 2V/div 5V/div
}
# set of seconds per major division
snit::enum ::sdrtcl::scope::seconds-per-div -values {
    1ns/div 2ns/div 5ns/div 10ns/div 20ns/div 50ns/div
    0.1μs/div 0.2μs/div 0.5μs/div 1μs/div 2μs/div 5μs/div 10μs/div 20μs/div 50μs/div
    0.1ms/div 0.2ms/div 0.5ms/div 1ms/div 2ms/div 5ms/div 10ms/div 20ms/div 50ms/div
    0.1s/div 0.2s/div 0.5s/div 1s/div 2s/div 5s/div 10s/div 20s/div 50s/div
}
# trigger modes
snit::enum ::sdrtcl::scope::trigger-modes -values { Auto Triggered Single }
# edge trigger slopes
snit::enum ::sdrtcl::scope::trigger-slopes -values { Rising Falling Crossing }
# maximum width of a list of strings
proc ::sdrtcl::scope::max-width {vals} {
    set maxw 0
    foreach v $vals {
	set maxw [expr {max($maxw,[string length $v])}]
    }
    return $maxw
}
    
#
# vertical - channel
#
snit::type ::sdrtcl::scope::channel {
    option -channel -default 1 -readonly true
    option -enable -default false
    option -position -default 0
    option -scale -default 1
    option -label -default {ch1}
    option -color -default white
    option -source -default {}
}

snit::macro ::sdrtcl::scope::channel-components {} {
    for {set i 1} {$i <= 8} {incr i} {
	component ch$i
	foreach opt {-channel -enable -position -scale -label -color -source} {
	    delegate option -ch$i$opt to ch$i as $opt
	}
    }
}

snit::type ::sdrtcl::scope::vertical {
    ::sdrtcl::scope::channel-components
    option -n-channels -default 4 -type {snit::integer -min 1 -max 8}
    option -channel -default 1 -type {snit::integer -min 1 -max 8}
    option -enable -configuremethod channel-config -cgetmethod channel-cget
    option -position -configuremethod channel-config
    option -scale -configuremethod channel-config
    option -label -configuremethod channel-config
    option -color -configuremethod channel-config
    option -source -configuremethod channel-config
    constructor {args} {
	for {set i 1} {$i <= 8} {incr i} {
	    install ch$i using sdrtcl::scope::channel $self.ch$i -channel $i
	}
	$self configurelist $args
    }
    method channel-configure {opt val} {
	set chn [set ch$options(-channel)]
	$chn configure $opt $val
    }
    method channel-cget {opt} {
	set chn [set ch$options(-channel)]
	return [$chn cget $opt]
    }
}

#
# horizontal - timebase
#
snit::type ::sdrtcl::scope::horizontal {
    option -scale -default 1
    option -position -default 0
    # ?option -delay -default 0
}

#
# trigger
#
snit::type ::sdrtcl::scope::trigger {
    option -mode -default Auto -type ::sdrtcl::scope::trigger-modes
    option -channel -default 1 -type ::sdrtcl::scope::channels
    option -slope -default Rising -type ::sdrtcl::scope::trigger-slopes
    option -level -default 0 -type snit::double
    option -holdoff -default 0 -type {snit::double -min 0}
    method force {} {
	# force trigger
    }
}

#
# overall scope
#
snit::widget ::sdrtcl::scope::scope {
    component c
    component trgr
    component vert
    component horiz
    #
    option -width -default 1200 -configuremethod pass
    option -height -default 1200 -configuremethod pass
    option -background -default black -configuremethod pass
    option -graticule -default 10x10 -type {snit::enum -values {10x10 8x10 10x8 none}}
    option -minor -default 1 -type {snit::enum -values {0 1}}
    #
    delegate option -n-channels to vert
    delegate option -channel to vert
    #
    constructor {args} {
	install c using canvas $win.c -borderwidth 0 -highlightthickness 0
	install trgr using sdrtcl::scope::trigger $self.t
	install vert using sdrtcl::scope::vertical $self.v
	install horiz using sdrtcl::scope::horizontal $self.h
	$self configure \
	    -width $options(-width) \
	    -height $options(-height) \
	    -background $options(-background) \
	    {*}$args
	$self graticule
	pack $c -side top -fill both -expand true
	bind $win <Configure> [list {*}[mymethod winconfigure] %w %h]
    }
    method pass {opt val} {
	set options($opt) $val
	$win.c configure $opt $val
    }
    method winconfigure {width height} {
	# window configuration event
	# puts "winconfigure $width $height"
	set options(-width) $width
	set options(-height) $height
	$self graticule
    }
    # generate graticule lines
    # axes, major tick marks at 8 or 10 per axis
    # minor tick marks yet to come, depends on scale
    # modern tek scopes put graticule lines around
    # the frame of the scope, there are dots in the
    # interior which mark minor ticks along the major
    # ticks of the other axis, so we get a grid.
    proc graticule-lines {ht wd {hminor 1} {wminor 1}} {
	#puts "graticule-lines $ht $wd"
	set lines {}
	lappend lines [list 0 0 1 0 1 1 0 1 0 0]; # box
	set tdq 0.01;				  # edge tick half width
	set mjq 0.005;				  # major tick half width
	set mnq 0.001;				  # minor tick half width
	set mjx [expr {1.0/$wd}]
	set mjy [expr {1.0/$ht}]
	set mnx [expr {$mjx/$wminor}]
	set mny [expr {$mjy/$hminor}]
	for {set x 0} {$x <= 1} {set x [expr {$x+$mjx}]} {
	    # vertical minor ticks
	    for {set y 0} {$y <= 1} {set y [expr {$y+$mny}]} {
		lappend lines [list $x [expr {$y-$mnq}] $x [expr {$y+$mnq}]]
		lappend lines [list [expr {$x-$mnq}] $y [expr {$x+$mnq}] $y]
	    }
	    # vertical major ticks
	    #for {set y 0} {$y <= 1} {set y [expr {$y+$mjy}]} {
	    #lappend lines [list $x [expr {$y-$mjq}] $x [expr {$y+$mjq}]]
	    #lappend lines [list [expr {$x-$mjq}] $y [expr {$x+$mjq}] $y]
	    #}
	    #lappend lines [list $x 0 $x $tdq] [list $x 1 $x [expr {1-$tdq}]]
	}
	for {set y 0} {$y <= 1} {set y [expr {$y+$mjy}]} {
	    # horizontal minor ticks
	    for {set x 0} {$x <= 1} {set x [expr {$x+$mnx}]} {
		lappend lines [list $x [expr {$y-$mnq}] $x [expr {$y+$mnq}]]
		lappend lines [list [expr {$x-$mnq}] $y [expr {$x+$mnq}] $y]
	    }
	    # horizontal major ticks
	    #for {set x 0} {$x <= 1} {set x [expr {$x+$mjx}]} {
	    #lappend lines [list $x [expr {$y-$mjq}] $x [expr {$y+$mjq}]]
	    #lappend lines [list [expr {$x-$mjq}] $y [expr {$x+$mjq}] $y]
	    #}
	    #lappend lines [list 0 $y $tdq $y] [list 1 $y [expr {1-$tdq}] $y ]
	}
	return $lines
    }
    # call me when window size changes
    method graticule {} {
	catch {$c delete graticule}
	switch $options(-graticule) {
	    10x10 - 
	    8x10 -
	    10x8 { 
		# major ticks per width and per height
		foreach {w h} [split $options(-graticule) x] break
		# minor ticks per major tick
		if {$options(-minor)} {
		    set mw 5
		    set mh 5
		} else {
		    set mw 1
		    set mh 1
		}
		# compute graticule coordinates and draw lines
		foreach coords [graticule-lines $w $h $mw $mh] {
		    $c create line $coords -fill white -tags graticule
		}
		$c scale graticule 0 0 $options(-width) $options(-height)
	    }
	    none {
	    }
	    default {
		error "unknown -graticule option found: $options(-graticule)"
	    }
	}
    }
    # methods for operating scope
    method autoset {} {
	# automatically set reasonable values
    }
    method default-setup {} {
	# restore a saved default setup
    }
    method print {} {
	# print the screen
    }
    method run-stop {} {
	# 
    }
    method single {} {
	#
    }
    method clear {} {
	# clear the scope screen
    }
}

#
# channel implementations
#
snit::type ::sdrtcl::scope::tcl-channel {
}

snit::type ::sdrtcl::scope::tcl-channel-sine {
    component osc

    option -amplitude -default 1 -readonly true
    option -receiver -default {}
    delegate option -frequence to osc as -hertz
    delegate option -sample-rate to osc as -samples-per-second

    variable data -array {
	run 0
	t 0
    }
    constructor {args} {
	install osc using ::sdrtcl::gen:osc
	$self configurelist $args
    }
    method start {} {
	set data(run) 1
	set data(t) [clock microseconds]
	set sps 
	set n [expr {[$self cget -sample-rate] * 0.05}]
	$self generate $n
    }
}

snit::type ::sdrtcl::scope::file-channel {
}
snit::type ::sdrtcl::scope::jack-channel {
}

	
#
# signal generators
#
# complex oscillator
# 3 adds 1 multiply and 1 divide per sample
#
snit::type ::sdrtcl::gen::osc {
    option -hertz -default 440 -configuremethod conf
    option -phase -default 0 -configuremethod conf
    option -samples-per-second -default 12000 -configuremethod conf
    option -receiver -default {}
    variable data -array {
	xi 1
	c 0
	x 0
	y 0
	twopi 6.28318530718
	finish {}
    }
    constructor {args} {
	$self set-hertz $options(-hertz) $options(-samples-per-second)
	$self set-phase $options(-phase)
	$self configurelist $args
    }
    method conf {opt val} {
	set options($opt) $val
	switch -- $opt {
	    -hertz {
		$self set-hertz $val $options(-samples-per-second)
	    }
	    -samples-per-second {
		$self set-hertz $options(-hertz) $val
	    }
	    -phase {
		if {$val == 0} {
		    $self set-zero-phase
		} else {
		    $self set-phase $val
		}
	    }
	    -receiver {}
	    default {
		error "unknown option $opt"
	    }
	}
    }
    method finish-positive {x y} { return [list $x $y] }
    method finish-negative {x y} { return [list $x [expr {-$y}]] }
    method set-hertz {hertz samples_per_second} {
	set current_xi $data(xi)
	set wps [expr {double($hertz) / $samples_per_second}]
	set rps [expr {$wps * $data(twopi)}]
	set data(c) [expr {sqrt(1.0/(1.0+square(tan($rps))))}]
	set data(xi) [expr {sqrt((1.0 - $data(c)) / (1.0 + $data(c)))}]
	set data(x) [expr {$data(x) * $data(xi) / $current_xi}]
	set data(finish) [expr {$hertz > 0 ? [mymethod finish-positive] : [mymethod finish-negative]}]
    }
    method set-phase {radians} {
	set data(x) [expr {cos($radians) * $data(xi)}]
	set data(y) [expr {sin($radians)}]
    }
    method set-zero-phase {} {
	set data(x) $data(xi)
	set data(y) 0
    }
    method process {} {
	set ox $data(x)
	set oy $data(y)
	set t [expr {($ox+$oy) * $data(c)}]
	set data(x) [expr {$t-$oy}]
	set data(y) [expr {$t+$ox}]
	return [{*}$data(finish) [expr {$ox / $data(xi)}] $oy]
    }
    method sample {n} {
	set dt [expr {1e6/$options(-samples-per-second)}]
	set t [clock microseconds]
	for {set j 0} {$j < $n} {incr j} {
	    foreach {i q} [iq process] break
	    lappend samplei $t $i
	    lappend sampleq $t $q
	    set t [expr {$t+$dt}]
	}
	return [list $samplei $sampleq]
    }
}

#
# tk user interface
#
namespace eval ::sdrtcl::tkscope {}

# knob
snit::widgetadaptor sdrtcl::tkscope::knob {
    option -diameter -default 50 -configuremethod set-option
    option -command {}
    option -value -default 0 -configuremethod set-option
    option -min-value -default -32767
    option -max-value -default 32767
    delegate option * to hull
    delegate method * to hull
    constructor {args} {
	installhull using sdrtk::dial -graticule 0 -button-radius 0 -cpr 64
	$self configurelist $args
	$win configure -height $options(-diameter) -width $options(-diameter)
	bind $win <<DialCW>> [mymethod turn 1]
	bind $win <<DialCCW>> [mymethod turn -1]
    }
    method set-option {opt val} {
	set options($opt) $val
	switch -exact -- $opt {
	    -value {
		set options($opt) [expr {min($options(-max-value), max($options(-min-value), $val))}]
		$self position $options(-value)
	    }
	    -diameter {
		$win configure -height $val -width $val
	    }
	}
    }
    method position {p} {
	$hull Position [expr {min($options(-max-value), max($options(-min-value), $p))}]
    }
    method turn {d} {
	incr options(-value) $d
	if {$options(-value) < $options(-min-value)} {
	    set options(-value) $options(-min-value)
	} elseif {$options(-value) >= $options(-max-value)} {
	    set options(-value) [expr {$options(-max-value)-1}]
	} else {
	    $hull Turn $win $d
	    if {$options(-command) ne {}} { {*}$options(-command) $options(-value) }
	}
    }
}

snit::widgetadaptor sdrtcl::tkscope::valueknob {
    option -values -default {} -configuremethod set-option
    option -value -default {} -configuremethod set-option
    delegate option * to hull
    delegate method * to hull
    constructor {args} {
	installhull using sdrtcl::tkscope::knob -command [mymethod report]
	$self configurelist $args
    }
    method set-option {opt val} {
	set options($opt) $val
	switch -exact -- $opt {
	    -values {
		set n [llength $val]
		set min 0
		set max [expr {$n-1}]
		$win configure -min-value $min -max-value $max -cpr $n
	    }
	    -value {
		if {[lsearch -exact $options(-values) $val] < 0} {
		    set-value -value [lindex $options(-values) 0]
		} else {
		    $hull configure -value [lsearch -exact $options(-values) $val]
		}
	    }
	}
    }
}

# spin box
snit::widgetadaptor sdrtcl::tkscope::spin {
    option -values -default {} -readonly true
    delegate option * to hull
    delegate method * to hull
    constructor {args} {
	installhull using tk::spinbox
	$self configurelist $args
	$hull configure -values $options(-values) -width [::sdrtcl::scope::max-width $options(-values)]
    }
}

# option menu
snit::widgetadaptor sdrtcl::tkscope::optionmenu {
    component menu
    option -value -default {} -configuremethod set-option
    option -values -default {} -configuremethod set-option
    option -colors -default {} -configuremethod set-option
    option -command -default {}
    delegate option * to hull
    delegate method * to hull

    constructor {args} {
	#puts "optionmenu::constructor $args"
	installhull using menubutton -textvariable [myvar options(-value)] -menu $win.menu
	install menu using ::menu $win.menu -tearoff no
	$self configurelist $args
	after 1 [mymethod rebuild-recolor]
    }
    # rebuild the menu
    # this needs to happen when -values is configured
    method rebuild {} {
	#puts "optionmenu::rebuild -values {$options(-values)} -colors {$options(-colors)}"
	$win configure -width [sdrtcl::scope::max-width $options(-values)]
	$win.menu delete 0 end
	foreach v $options(-values) c $options(-colors) {
	    if {$c eq {}} {
		$win.menu add radiobutton -label $v -variable [myvar options(-value)] -command [list {*}[mymethod doreport] -value]
	    } else {
		$win.menu add radiobutton -label $v -variable [myvar options(-value)] -command [list {*}[mymethod doreport] -value] -background $c -activebackground $c
	    }
	}
	if {$options(-value) eq {}} {
	    set options(-value) [lindex $options(-values) 0]
	    $self recolor
	}
    }
    method recolor {} {
	if {$options(-colors) ne {}} {
	    set c [lindex $options(-colors) [lsearch -exact $options(-values) $options(-value)]]
	    if {$c ne {}} {
		$win configure -background $c -activebackground $c
	    }
	}
    }
    method rebuild-recolor {} {
	$self rebuild
	$self recolor
    }
    method set-option {opt val} {
	set options($opt) $val
	switch -exact -- $opt {
	    -value { $self recolor }
	    -values - -colors { $self rebuild-recolor }
	}
    }
    # report the -value
    method doreport {opt} {
	$self recolor
	if {$options(-command) ne {}} {
	    {*}$options(-command) $options(-value)
	}
    }
}

# oscilloscope channel picker
snit::widgetadaptor sdrtcl::tkscope::channel-picker {
    option -n-channels -default 4 -configuremethod set-option
    option -channel -default 1 -configuremethod set-option
    option -command -default {}
    delegate option * to hull
    delegate method * to hull 
    constructor {args} {
	installhull using ::sdrtcl::tkscope::optionmenu -command [mymethod report]
	$self configurelist $args
	$self rebuild-values
    }
    method set-option {opt val} {
	#puts "channel-picker::set-option $opt $val"
	set options($opt) $val
	switch -exact -- $opt {
	    -n-channels { $self rebuild-values }
	    -channel { $win configure -value "ch$val" }
	}
    }
    method rebuild-values {} {
	set values {}
	set colors {}
	for {set i 1} {$i <= $options(-n-channels)} {incr i} {
	    #puts "channel-picker::rebuild-values $i ch$i [::sdrtcl::scope::get-channel-color $i]"
	    lappend values "ch$i"
	    lappend colors [::sdrtcl::scope::get-channel-color $i]
	}
	#puts "channel-picker::rebuild-values $win configure -values {$values} -colors {$colors}"
	$win configure -values $values -colors $colors -value "ch$options(-channel)"
    }
    method report {chn} {
	set n [string index $chn end]
	set options(-channel) $n
	if {$options(-command) ne {}} {
	    {*}$options(-command) $n
	}
    }
}
# oscilloscope channel radiobutton group in tk
snit::widget sdrtcl::tkscope::channel-radio {
    option -command -default {}
    option -value -default 0
    option -n-channels -default 4 -type {snit::integer -min 1 -max 8} -configuremethod n-channels
    constructor {args} {
	$self configurelist $args
	$self build-buttons
    }
    method build-buttons {} {
	foreach w [winfo children $win] {
	    if {[string match $win.c? $w]} {
		catch {destroy $w}
	    }
	}
	for {set c 1} {$c <= $options(-n-channels)} {incr c} {
	    set color [::sdrtcl::scope::get-channel-color $c]
	    grid [tk::radiobutton $win.c$c -text "  Ch$c  " -variable [myvar options(-value)] -value $c \
		      -indicatoron false -background $color -activebackground $color -selectcolor $color \
		      -borderwidth 8 -offrelief flat -overrelief raised \
		      -command [mymethod command] \
		     ] -row $c -column 0
	}
    }
    method n-channels {opt val} {
	set options(-n-channels) $val
	$self build-buttons
    }
    method command {args} {
	# puts "channel;;command {$options(-command)}"
	if {$options(-command) ne {}} {
	    {*}$options(-command) $options(-value)
	}
    }
}

# oscilloscope horizontal controls in tk
snit::widget sdrtcl::tkscope::horizontal {
    hulltype ttk::labelframe
    component positionlabel
    component position
    component scalelabel
    component scales
    component scalek

    delegate option -text to hull
    delegate option -labelanchor to hull
    delegate option -position to position as -value
    option -scale -default {} -configuremethod set-scale
    option -command -default {}

    constructor {args} {
	$win configure -text Horizontal -labelanchor n
	install positionlabel using ttk::label $win.positionlabel -text Position
	install position using sdrtcl::tkscope::knob $win.position -diameter 100 -command [list {*}[mymethod report] -position]
	install scalelabel using ttk::label $win.scalelabel -text Scale
	install scales using sdrtcl::tkscope::spin $win.scales -values [::sdrtcl::scope::seconds-per-div cget -values] -command [list {*}[mymethod report] -scales]
	install scalek using sdrtcl::tkscope::valueknob $win.scalek -diameter 150 -values [::sdrtcl::scope::seconds-per-div cget -values] \
	    -command [list {*}[mymethod report] -scalek]
	grid $win.positionlabel -row 0 -column 0
	grid $win.position -row 1 -column 0
	grid $win.scalelabel -row 2 -column 0
	grid $win.scales -row 3 -column 0
	grid $win.scalek -row 4 -column 0
    }
    method set-scale {opt val} {
	set options($opt) $val
	$win.scales configure -value $val
	$win.scalek configure -value $val
    }
    method report {opt val} {
	switch -exact -- $opt {
	    -scales { $win.scalek configure -value $val }
	    -scalek { $win.scales configure -value $val }
	}
	if {$options(-command) ne {}} {
	    {*}$options(-command) $opt $val
	}
    }
}

# oscillosdope trigger mode in tk
snit::widget sdrtcl::tkscope::trigger-mode {
    option -value -default Auto -type ::sdrtcl::scope::trigger-modes
    option -command -default {}
    option -values -default {}
    variable mode
    constructor {args} {
	$self configurelist $args
	set row -1
	foreach m $options(-values) {
	    set wm [string tolower $m]
	    grid [ttk::radiobutton $win.$wm -text $m -value $m -variable [myvar options(-value)] \
		      -command [mymethod set-value]] -row [incr row] -column 0
	}
    }
    method set-value {} {
	puts "trigger-mode:set-value $options(-value)"
    }
}

# oscilloscope trigger controls in tk
snit::widget sdrtcl::tkscope::trigger {
    hulltype ttk::labelframe
    component modelabel
    component mode
    component levellabel
    component level
    component slopelabel
    component slope
    component holdofflabel
    component holdoff
    component channellabel
    component channel
    #
    delegate option -text to hull
    delegate option -labelanchor to hull
    #
    delegate option -mode to mode as -value
    delegate option -level to level as -value
    delegate option -channel to channel
    delegate option -n-channels to channel
    delegate option -slope to slope as -value
    delegate option -holdoff to holdoff as -value
    option -command -default {}
    
    constructor {args} {
	$win configure -text Trigger -labelanchor n

	install modelabel using ttk::label $win.modelabel -text Mode
	install mode using sdrtcl::tkscope::optionmenu $win.mode -values [::sdrtcl::scope::trigger-modes cget -values] \
	    -command [list {*}[mymethod report] -mode]
	install levellabel using ttk::label $win.levellabel -text Level
	install level using sdrtcl::tkscope::knob $win.level -diameter 100 -command [list {*}[mymethod report] -level]
	install slopelabel using ttk::label $win.slopelabel -text Slope
	install slope using sdrtcl::tkscope::optionmenu $win.slope -values [::sdrtcl::scope::trigger-slopes cget -values] \
	    -command [list {*}[mymethod report] -slope]
	install holdofflabel using ttk::label $win.holdofflabel -text Holdoff
	install holdoff using sdrtcl::tkscope::knob $win.holdoff -diameter 150 -command [list {*}[mymethod report] -holdoff]

	install channellabel using ttk::label $win.channellabel -text Channel
	install channel using sdrtcl::tkscope::channel-picker $win.channel -command [list {*}[mymethod report] -channel]

	$self configurelist $args

	grid $modelabel    -row 0 -column 0
	grid $mode	   -row 1 -column 0
	grid $channellabel -row 2 -column 0
	grid $channel      -row 3 -column 0
	grid $slopelabel   -row 4 -column 0
	grid $slope	   -row 5 -column 0
	grid $levellabel   -row 6 -column 0
	grid $level	   -row 7 -column 0
	grid $holdofflabel -row 8 -column 0
	grid $holdoff	   -row 9 -column 0

    }
    method report {opt val} {
	if {$options(-command) ne {}} {
	    {*}$options(-command) $opt [$self cget $opt]
	}
    }
}

snit::widget sdrtcl::tkscope::vertical {
    hulltype ttk::labelframe
    component channel
    component positionlabel
    component position
    component scalelabel
    component scales
    component scalek
    # window dressing
    delegate option -text to hull
    delegate option -labelanchor to hull
    # oscilloscope options
    option -command {}
    delegate option -n-channels to channel
    delegate option -channel to channel as -value
    option -scale -configuremethod set-option
    delegate option -position to position as -value
    constructor {args} {
	install channel using sdrtcl::tkscope::channel-radio $win.channel -command [list {*}[mymethod report] -channel]
	install positionlabel using ttk::label $win.positionlabel -text Position
	install position using sdrtcl::tkscope::knob $win.position -diameter 100 -command [list {*}[mymethod report] -position]
	install scalelabel using ttk::label $win.scalelabel -text Scale
	install scales using sdrtcl::tkscope::spin $win.scales -values [::sdrtcl::scope::volts-per-div cget -values] -command [list {*}[mymethod report] -scales]
	install scalek using sdrtcl::tkscope::valueknob $win.scalek -diameter 150 -values [::sdrtcl::scope::volts-per-div cget -values] \
	    -command [list {*}[mymethod report] -scalek]

	$win configure -text Vertical -labelanchor n
	$self configurelist $args
	grid $channel -row 0 -column 0 -rowspan 5

	grid $positionlabel  -row 0 -column 1
	grid $position -row 1 -column 1
	grid $scalelabel  -row 2 -column 1
	grid $scales -row 3 -column 1
	grid $scalek -row 4 -column 1
    }
    method report {opt val} {
	#puts "vertical::report $args"
	switch -exact -- $opt {
	    -scales { $win.scalek configure -value $val }
	    -scalek { $win.scales configure -value $val }
	}
	if {$options(-command) ne {}} {
	    {*}$options(-command) $opt $val
	}
    }
    method set-option {opt val} {
	puts "vertical::set-option $opt $val"
	switch -exact -- $opt {
	    -scale {
		$win.scales configure -value $val
		$win.scalek configure -value $val
	    }
	}
    }
}

snit::widget sdrtcl::tkscope::generic {
    option -command
}
snit::widget sdrtcl::tkscope::acquisition {
    option -command
}

snit::widget sdrtcl::tkscope::scope {
    component generic
    component trigger
    component horizontal
    component vertical
    component acquisition

    option -scope -default {}
    option -n-channels -default 4 -type {snit::integer -min 1 -max 8} -configuremethod n-channels
    delegate option -vertical-channel to vertical

    delegate option -trigger-channel to trigger as -channel
    delegate option -trigger-mode to trigger as -mode
    delegate option -trigger-slope to trigger as -slope
    delegate option -trigger-level to trigger as -level
    delegate option -trigger-holdoff to trigger as -holdoff
    delegate method trigger-force to trigger as force

    constructor {args} {
	install generic using sdrtcl::tkscope::generic $win.generic -command [list {*}[mymethod report] -generic]
	install trigger using sdrtcl::tkscope::trigger $win.trigger -command [list {*}[mymethod report] -trigger]
	install horizontal using sdrtcl::tkscope::horizontal $win.horizontal -command [list {*}[mymethod report -horizontal]]
	install vertical using sdrtcl::tkscope::vertical $win.vertical -command [list {*}[mymethod report -vertical]]
	install acquisition using sdrtcl::tkscope::acquisition $win.acquisition -command [list {*}[mymethod report -acquisition]]
	$self configurelist $args
	grid $win.generic -row 0 -column 0 -sticky nsew
	grid $win.trigger -row 1 -column 0 -sticky nsew
	grid $win.horizontal -row 2 -column 0 -sticky nsew
	grid $win.vertical -row 3 -column 0 -sticky nsew
	grid $win.acquisition -row 4 -column 0 -sticky nsew
    }
    # delegate option -n-channels to vert and to trgr
    method n-channels {opt val} {
	$win.vertical configure -n-channels $val
	$win.trigger configure -n-channels $val
    }
    method report {prefix opt val} {
	puts "tkscope::scope::report $prefix $opt $val"
    }
}


proc main {argv} {
    # scope display
    grid [sdrtcl::scope::scope .o {*}$argv] -row 0 -column 0 -sticky nsew
    # scope control
    grid [sdrtcl::tkscope::scope .c -scope .o {*}$argv] -row 0 -column 1 -sticky nsew
    # make it snug
    grid columnconfigure . 0 -weight 100
    grid columnconfigure . 1 -weight 1
    # install application icon
    set dir [file join $::dirname .. icons]
    image create photo icon1 -file [file join $dir qrv96.png]
    image create photo icon2 -file [file join $dir qrv48.png]
    wm iconphoto . -default icon1 icon2
    wm title . keyer-scope
}

if {[llength [info functions square]] == 0} {
    proc tcl::mathfunc::square {x} { return [expr {$x*$x}] }
}

main $argv
