#!/usr/bin/tclsh8.6
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

#
# start an sdrtcl dbus master and a hamlib rigctld
# the controller polls the sdrtcl components and
# builds an interface

# get the script name
set script [info script]

# append the ../lib directory to the Tcl search path
lappend auto_path [file join [file dirname $script] .. lib]

# find the name of the script, without reading links
set name [file tail $script]

# initialize data
array set data { present {} monitor {} dict {} }

# prepare to dbus
package require dbus
package require dbif

# dbus/dbif helpers
proc sdrkit-ping {name} {
    return [dbus call $name org.freedesktop.DBus.Peer Ping]
}
proc sdrkit-introspect {name} {
    return [dbus call -dest org.sdrkit.$name / org.freedesktop.DBus.Introspectable Introspect]
}
proc sdrkit-get-all {name} {
    return [dbus call -dest org.sdrkit.$name / org.freedesktop.DBus.Properties GetAll org.sdrkit.Bus]
}
proc sdrkit-get-value {name key} {
    return [dbus call -dest org.sdrkit.$name / org.freedesktop.DBus.Properties Get org.sdrkit.Bus $key]
}
proc sdrkit-set-value {name key value} {
    return [dbus call -dest org.sdrkit.$name / org.freedesktop.DBus.Properties Set org.sdrkit.Bus $key $value]
}
proc sdrkit-listen {path interface member script} {
    if {$path eq {}} {
	dbus filter add -type signal -interface $interface -member $member
    } else {
	dbus filter add -type signal -path $path -interface $interface -member $member
    }
    dbus listen $path $interface.$member $script
}

## connect to the bus
dbif default -bus session -interface org.sdrkit.Bus
dbif connect -replace -yield org.sdrkit.bus

## listen for name replacement
## NB, don't know if this works or not, never tried
dbif listen -interface org.freedesktop.DBus /org/freedesktop/DBus NameLost { exit }

## listen for the responses to the roll call
dbif listen -interface org.sdrkit.Bus / Present name {
    # puts "[clock milliseconds] org.sdrkit.Bus.Present($name)"
    lappend ::data(present) $name
}

#
# poll for components
# after all changes have settled
#
proc start-rollcall {} {
    # puts "[clock milliseconds]: start-rollcall"
    # initialize the list of responders and monitor log
    array set ::data {present {} monitor {}}
    # announce roll call
    # puts "[clock milliseconds] put org.sdrkit.Bus.RollCall()"
    dbus signal / org.sdrkit.Bus RollCall
    # start monitor
    after 250 [list monitor-rollcall]
}

#
# listen for responses to roll call
# until the list stabilizes, then
# find out what the components can do
#
proc monitor-rollcall {} {
    # see how many components have reported
    set n [llength $::data(present)]
    # remember this outcome
    lappend ::data(monitor) $n
    # see if it's stable
    if {[llength [lsearch -all -exact $::data(monitor) $n]] < 5} {
	# puts "[clock milliseconds] monitor-rollcall go around again: $::data(monitor)"
	# still stabilizing
	after 100 [list monitor-rollcall]
    } else {
	# one quarter second at this level of response
	set ::data(present) [lsort $::data(present)]
	# puts "[clock milliseconds] monitor-rollcall install $::data(present)"
	# puts "updating components to $::data(present)"
	set d [dict create]
	foreach name $::data(present) {
	    # puts "[clock milliseconds] [sdrkit-introspect $name]"
	    set p [dict create]
	    foreach {key value} [sdrkit-get-all $name] {
		dict set p $key $value
		# puts "$key @ $name -> [sdrkit-get-value $name $key]"
	    }
	    dict set d $name $p
	}
	set ::data(dict) $d
	puts "[clock milliseconds] $d"
    }
}

proc signal-received {name dict args} {
    #puts "[clock milliseconds] signal-received $name $args"
    catch {after cancel $::data(after)}
    set ::data(after) [after 250 start-rollcall]
}
    
foreach member {AppAdded AppRemoved AppStateChanged} {
    sdrkit-listen {} org.ladish.AppSupervisor $member [list signal-received $member]
    sdrkit-listen {} org.ladish.AppSupervisor ${member}2 [list signal-received ${member}2]
}    

## schedule the first roll call
set ::data(after) [after 250 [list start-rollcall]]

vwait ::finished
