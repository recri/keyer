#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

#package provide spectrum 1.0.0

package require Tk
package require sdrkit

namespace eval ::spectrum {
    set n 0
    array set default_data  {  
	type magnitude
	label-y-scale 1.0 y-zoom 0 y-scale 1.0
	label-x-scale 1.0 x-zoom 0 x-scale 1.0
    }
}

proc spectrum::capture {w} {
    upvar #0 $w data
    foreach {f b} [::$data(tap) $data(n)] break
    set l [::$data(fft) $b]
    binary scan $l f* levels
    
    set report [format {%d samples %d ms %d floats} $data(n) $data(p) [llength $levels]]
    if { ! [info exists data(report)] || $data(report) ne $report} {
	puts [set data(report) $report]
    }
    ## they're ordered from 0 .. most positive, most negative .. just < 0
    ## k/T, T = total sample time, n * 1/sample_rate
    set freqreport [format {max freq %.1f} [expr {($data(n)/2) / ($data(n)*(1.0/[sdrkit::jack sample-rate]))}]]
    if { ! [info exists data(freqreport)] || $data(freqreport) ne $freqreport} {
	puts [set data(freqreport) $freqreport]
    }
    # strictly
    # if it's a magnitude spectrum, then it goes from 0 to 1
    # if it's a power spectrum it goes from -160 to 0
    # in either case x goes from 0 to n
    if {$data(type) eq {magnitude}} {
	set x [expr {$data(n)/2}]
	foreach {re im} $levels {
	    lappend xy $x [expr {sqrt($re*$re+$im*$im)}]
	    if {[incr x] == $data(n)} { set x 0 }
	}
    } elseif {$data(type) eq {power}} {
	set x [expr {$data(n)/2}]
	foreach {re im} $levels {
	    lappend xy $x [expr {10*log10($re*$re+$im*$im+1e-16)}]
	    if {[incr x] == $data(n)} { set x 0 }
	}
    }
    $w.c coords spectrum $xy
    set ht [winfo height $w.c]
    set wd [winfo width $w.c]
    if {$data(type) eq {magnitude}} {
	$w.c move spectrum 0 $ht
	$w.c scale spectrum 0 0 [expr {double($wd)/$data(n)}] [expr {-double($ht)/2.0}]
    } else {
	$w.c scale spectrum 0 0 [expr {double($wd)/$data(n)}] [expr {-double($ht)/180.0}]
    }
    # $w.c move spectrum 0 [expr {$ht-10}]
    $w.c configure -scrollregion [$w.c bbox all]
    after $data(p) [list spectrum::capture $w]
}

proc spectrum::zoom-scale {zoom} {
    set mant [lindex {1.0 2.5 5.0} [expr {$zoom%3}]]
    return [expr {$mant*pow(10, $zoom/3)}]
}

proc spectrum::format-scale {scale} {
    if {[string length $scale] <= 4} {
	return $scale
    } else {
	return [format %.1e $scale]
    }
}

proc spectrum::zoom {w x y} {
    upvar #0 $w data
    # zoom 0 -> 1, 1 -> 2.5, 2 -> 5, 3 -> 10, ...
    set newx [zoom-scale [incr data(x-zoom) $x]]
    set newy [zoom-scale [incr data(y-zoom) $y]]
    $w.c scale all 0 0 [expr {$newx/$data(x-scale)}] [expr {$newy/$data(y-scale)}]
    set data(x-scale) $newx
    set data(y-scale) $newy
    $w.c configure -scrollregion [$w.c bbox all]
    set data(label-x-scale) [format-scale $data(x-scale)]
    set data(label-y-scale) [format-scale $data(y-scale)]
}

proc spectrum::spectrum {w n p} {
    upvar #0 $w data
    ttk::frame $w
    array set data [array get ::spectrum::default_data]
    set data(n) $n
    set data(p) $p
    set data(tap) spectrum_tap_$::spectrum::n
    set data(fft) spectrum_fft_$::spectrum::n
    incr ::spectrum::n
    ::sdrkit::atap $data(tap)
    ::sdrkit::fftw $data(fft) $data(n)
    grid [ttk::frame $w.m] -row 0 -column 0 -columnspan 2 -sticky ew
    pack [ttk::menubutton $w.m.type -textvariable ${w}(type) -menu $w.m.type.m] -side left
    menu $w.m.type.m -tearoff no
    foreach t {magnitude power} { $w.m.type.m add radiobutton -label $t -value $t -variable ${w}(type) }
    pack [ttk::button $w.m.xp -text {+x} -command [list spectrum::zoom $w 1 0]] -side left
    pack [ttk::label $w.m.xl -textvariable ${w}(label-x-scale)] -side left
    pack [ttk::button $w.m.xm -text {-x} -command [list spectrum::zoom $w -1 0]] -side left
    pack [ttk::button $w.m.yp -text {+y} -command [list spectrum::zoom $w 0 1]] -side left
    pack [ttk::label $w.m.yl -textvariable ${w}(label-y-scale)] -side left
    pack [ttk::button $w.m.ym -text {-y} -command [list spectrum::zoom $w 0 -1]] -side left
    grid [canvas $w.c -yscrollcommand [list $w.y set] -xscrollcommand [list $w.x set]] -row 1 -column 0 -sticky nsew
    grid [ttk::scrollbar $w.y -orient vertical -command [list $w.c yview]] -row 1 -column 1 -sticky ns
    grid [ttk::scrollbar $w.x -orient horizontal -command [list $w.c xview]] -row 2 -column 0 -sticky ew
    grid columnconfigure $w 0 -weight 100
    grid rowconfigure $w 1 -weight 100
    $w.c create line 0 0 0 0 -tag spectrum
    spectrum::capture $w
    return $w
}

proc spectrum {w n p} { return [spectrum::spectrum $w $n $p] }

proc main {argv} {
    pack [spectrum .scope 4096 10] -fill both -expand true
}

main $argv