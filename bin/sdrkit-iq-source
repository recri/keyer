#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 


#
# find the script file
# and add the lib directory to the automatic package search path
#
set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

#
# require Tk for graphical UI and communications
#
package require Tk
package require sdrtk::clabelframe

#
# on the fly implementation of control interface
#
package require snit

namespace eval sdrkit {}

snit::type sdrkit::iq-source {
    option -server -default default -readonly true
    option -name -default sdr-src -readonly true
    option -control -default {} -readonly true
    option -title -default {IQ Source} -readonly true
    option -minsizes -default {100 200} -readonly true
    option -weights -default {1 3} -readonly true


    variable data -array {
    }

    constructor {args} {
	$self configure {*}$args

	tk appname $options(-name)
	wm title . $options(-title)

	foreach {name title command} [$self Components] {
	    grid [sdrtk::clabelframe .$name -label $title] -sticky ew
	    grid [ttk::checkbutton .$name.enable -text Enable -variable [myvar data($name-enable)] -command [mymethod Set enable $name]] -sticky w
	    set data($name-enable) 0
	    grid [frame .$name.container -container true]
	    set cmd [list \
			 [file join [file dirname $::script] [lindex $command 0]] \
			 -use [winfo id .$name.container] \
			 -- \
			 {*}[lrange $command 1 end] \
			 -server $options(-server) \
			 -name $options(-name)-$name \
			 -control $options(-name) \
			 -minsizes $options(-minsizes) \
			 -weights $options(-weights) \
			]
		     set data($name-pid) [exec {*}$cmd &]
	}
	grid columnconfigure . 0 -minsize [tcl::mathop::+ {*}$options(-minsizes)] -weight 1
    }
    destructor {
	foreach {name title command} [$self Components] {
	    catch {send $options(-name)-$name ::sdrkit destroy}
	}
    }
    method Components {} {
	lappend components sg {Signal Generator} {sdrkit-signal-generator -n-osc 4}
	lappend components iq "IQ Imbalance" sdrkit-iq-unbalance
	return $components
    }
    method Configure {opt val} {
	set options($opt) $val
	switch -- $opt {
	    default {}
	}
    }
    method {Set enable} {name} {
	if {$data($name-enable)} {
	    send $options(-name)-$name ::sdrkit configure -enable 1 -activate 1
	} else {
	    send $options(-name)-$name ::sdrkit configure -activate 0 -enable 0
	}
    }
}

sdrkit::iq-source ::sdrkit {*}$argv


