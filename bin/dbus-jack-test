#!/usr/bin/tclsh8.6
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk

package require dbus-jack

dbus connect

proc handler {data args} {
    puts stderr {$data} $args
}

proc toggle-server {} {
    if {[::dbus-jack::is-started]} {
	::dbus-jack::stop-server
    } else {
	::dbus-jack::start-server
    }
}

#
# first attempt
#
proc filter1 {} {
    dbus filter add -type signal
}
proc filter2 {} {
    dbus filter add -type signal -interface org.jackaudio.JackControl -member ServerStarted
    dbus filter add -type signal -interface org.jackaudio.JackControl -member ServerStopped
}
proc filter3 {} {
    dbus filter add -type signal -interface org.jackaudio.JackControl
}

proc listen1 {} {
    dbus listen {} ServerStarted handler
    dbus listen {} ServerStopped handler
}

proc listen2 {} {
    dbus listen /org/jackaudio/Controller ServerStarted handler
    dbus listen /org/jackaudio/Controller ServerStopped handler
}

proc listen3 {} {
    dbus listen /org/jackaudio/Controller org.jackaudio.JackControl.ServerStarted handler
    dbus listen /org/jackaudio/Controller org.jackaudio.JackControl.ServerStopped handler
}

proc listen4 {} {
    dbus listen /org/jackaudio/service org.jackaudio.JackControl.ServerStarted handler
    dbus listen /org/jackaudio/service org.jackaudio.JackControl.ServerStopped handler
}

if {[llength $argv] == 2} {
    lassign $argv f l
} else {
    lassign {1 1} f l
}

filter$f
listen$l
puts "testing filter$f listen$l"

proc test-started {} {
    if {[::dbus-jack::is-started]} {
	set ::started started
    } else {
	set ::started stopped
    }
    after 250 [list test-started]
}

after 100 [list test-started]

pack [label .started -textvar ::started] -side top
pack [button .quit -text quit -command {destroy .}] -side top
