#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

# set the tcl package search path to look in ../lib from the script
lappend auto_path [file join [file dirname [info script]] .. lib]

# require the oscillator packages and jack

package require sdrkit::oscillatorf
package require sdrkit::oscillatort
package require sdrkit::oscillatorz
package require sdrkit::jack

proc average {list} {
    set sum 0
    foreach item $list {
	set sum [expr {$sum+$item}]
    }
    return [expr {$sum/double([llength $list])}]
}
    
##
## the jack cpu-load only gets computed once a second
##
proc accumulate-load {} {
    set n 0
    set loads {}
    while {[llength $loads] < 30} {
	lappend loads [sdrkit::jack cpu-load]
	after 500
    }
    return [average [lrange $loads 20 end]]
}

##
## okay, we're going to race three complex oscillators
## against each other by loading them into Jack, letting
## them run for a while, and then recording the jack
## reported cpu-load percentage averaged over the last five
## seconds of the run.
##
## we intersperse each oscillator run with baseline runs
## where we record the same cpu-load percentage average
## for jack with nothing loaded.
##
## the results are:
##
## baseline: 0.45
## oscillatorf: 1.14	funky filter based oscillator
## baseline: 0.42
## oscillatort: 2.24	oscillator using math.h sin() and cos()
## baseline: 0.39	
## oscillatorz: 1.43	complex phase[t+1] = phase[t] * dphase
## baseline: 0.44
##
##
foreach f {b f b t b z b} {
    switch $f {
	b {
	    puts [format "baseline: %.2f" [accumulate-load]]
	}
	f -
	t -
	z {
	    sdrkit::oscillator$f foo
	    puts [format "oscillator$f: %.2f" [accumulate-load]]
	    rename foo {}
	}
    }
}
