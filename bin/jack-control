#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk

package require sdrtcl::jack-ctl
package require sdrtcl::jack-client

array set data {}

proc get-parameter-by-name {ps name} {
    foreach p $ps {
	if {[sdrtcl::jack-ctl parameter-get-name $p] eq {name}} {
	    return $p
	}
    }
    error "parameter $name not found"
}
proc get-server-parameter-by-name {obj name} {
    return [get-parameter-by-name [sdrtcl::jack-ctl get-parameters $obj] $name]
}
proc get-driver-parameter-by-name {drv name} {
    return [get-parameter-by-name [sdrtcl::jack-ctl driver-get-parameters $drv] $name]
}
proc get-internal-parameter-by-name {int name} {
    return [get-parameter-by-name [sdrtcl::jack-ctl internal-get-parameters $int] $name]
}

proc config-panel {w} {
    upvar #0 $w data
    ttk::frame $w
    return $w
}

proc status-panel {w} {
    upvar #0 $w data
    ttk::frame $w
    return $w
}

proc connect-panel {w} {
    upvar #0 $w data
    ttk::frame $w
    return $w
}

proc server-destroy {w wd} {
    upvar #0 $w data
    if {$w eq $wd} {
	switch $data(state) {
	    created { sdrtcl::jack-ctl destroy $data(obj) }
	}
    }
}

proc server-panel {w server} {
    upvar #0 $w data
    set data(server) $server
    set data(obj) [sdrtcl::jack-ctl create]
    puts "create $data(obj)"
    puts "set server name -> [sdrtcl::jack-ctl parameter-set-value [get-server-parameter-by-name $data(obj) name] $server]"
    set data(state) created
    ttk::notebook $w
    set p 0
    foreach panel {config status connect} {
	$w add [$panel-panel $w.p[incr p]] -text $panel
    }
    bind . <Destroy> [server-destroy $w %W]
    return $w
}

proc main {argv} {
    set p 0
    pack [ttk::notebook .p] -side top -fill both -expand true
    foreach server $argv {
	.p add [server-panel .p[incr p] $server] -text $server
    }
}

main $argv
