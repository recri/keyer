#!/usr/bin/tclsh
# -*- mode: Tcl; tab-width: 8; -*-
#
# Copyright (C) 2011, 2012 by Roger E Critchlow Jr, Santa Fe, NM, USA.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
# 

set script [expr { ! [catch {file readlink [info script]} link] ? $link : [info script]}]
lappend auto_path [file join [file dirname $script] .. lib]

package require Tk
package require waterfall
package require capture

namespace eval ::main {
    array set default_data {
	-zoom 1.0
	-scroll 0.0
	-connect {}
	-period 50
	-size 128
    }
}

proc ::main::update {w xy} {
    upvar #0 ::main::$w data
    ::waterfall::update $w $xy
}

proc ::main::configure {w args} {
    upvar #0 ::main::$w data
    foreach {option value} $args {
	switch -- $option {
	    default { set data($option) $value 	}
	}
    }
}

proc ::main::window-configure {w cw width height} {
    if {$w ne $cw} return
    # puts "main::window-configure $w $cw $width $height"
    upvar #0 ::main::$w data
    ::capture::configure $w -size $width
    set srate [sdrkit::jack sample-rate]
    set scale [expr {$data(-zoom)*double($width)/$srate}]
    set offset [expr {double($width)/2}]
    ::waterfall::configure $w -scale $scale -offset $offset
}

proc ::main::window-destroy {w cw} {
    if {$w ne $cw} return
    upvar #0 ::main::$w data
    ::capture::destroy $w
    ::waterfall::destroy $w
}

proc ::main::defaults {} {
    return [array get ::main::default_data]
}

proc ::main::main {w args} {
    upvar #0 ::main::$w data
    ::main::configure $w {*}[::main::defaults]
    ::main::configure $w {*}$args
    ::waterfall $w
    ::capture::spectrum $w -period $data(-period) -size $data(-size) -client ::main::update
    bind . <Configure> [list ::main::window-configure $w %W %w %h]
    bind . <Destroy> [list ::main::window-destroy $w %W]
    after 100 [list ::capture::start $w]
    puts "main returns $w"
    return $w
}

proc ::main {argv} {
    pack [::main::main .waterfall {*}$argv] -side top -fill both -expand true
}

::main $argv