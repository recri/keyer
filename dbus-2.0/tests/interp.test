if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

package require dbus-tcl
dbus connect

test interp-1.1 {simple interpreter} -setup {
    set interp [interp create]
} -body {
    $interp eval {
	package require dbus-tcl
    	dbus connect
    }
} -cleanup {
    interp delete $interp
} -match regexp -result session

test interp-1.2 {delete interpreter with method} -setup {
    set interp [interp create]
} -body {
    $interp eval {
	package require dbus-tcl
    	dbus connect
	dbus method / foo dummy
    }
    interp delete $interp
} -returnCodes 0

test interp-1.3 {main interp still works after deleting slave} -setup {
    set interp [interp create]
    $interp eval {
        package require dbus-tcl
        dbus connect
    }
    interp delete $interp
} -body {
    dbus name a.b.c
} -returnCodes 0

test interp-1.4 {main interp listener still exists after deleting slave} -setup {
    dbus listen /foo bar baz
    set interp [interp create]
    $interp eval {
        package require dbus-tcl
        dbus connect
	dbus listen /foo bar baz
    }
    interp delete $interp
} -body {
    dbus listen
} -cleanup {
    dbus listen /foo bar {}
} -result {/foo bar baz}

test interp-1.5 {cannot define method in multiple interps} -setup {
    dbus method /foo bar baz
    set interp [interp create]
    $interp eval {
	package require dbus-tcl
	dbus connect
    }
} -body {
    $interp eval {dbus method /foo bar baz}
} -cleanup {
    interp delete $interp
    dbus method /foo bar {}
} -returnCodes 1 -result {method is in use by another interpreter}

test interp-1.6 {possible to define method after deleting interp} -setup {
    set interp [interp create]
    $interp eval {
	package require dbus-tcl
	dbus connect
	dbus method /foo bar baz
    }
    interp delete $interp
} -body {
    dbus method /foo bar baz
} -cleanup {
    dbus method /foo bar {}
} -returnCodes 0

# cleanup
cleanupTests
return
