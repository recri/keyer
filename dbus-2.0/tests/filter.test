if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

package require dbus-tcl
dbus connect

proc handler {data args} {
    global signal
    set signal [dict get $data member]
}

test filter-1.1 {add simple filter} -body {
    dbus filter add -interface com.tcltest.test
} -cleanup {
    dbus filter remove -interface com.tcltest.test
} -result {interface='com.tcltest.test'}

test filter-1.2 {remove simple filter} -setup {
    dbus filter add -interface com.tcltest.test
} -body {
    dbus filter remove -interface com.tcltest.test
} -result {interface='com.tcltest.test'}

test filter-1.3 {add strict filter} -body {
    dbus filter add -destination com.tcltest.test.filter \
      -interface com.tcltest.test -member foo -path / \
      -sender com.tcltest.test.filter -type signal
} -cleanup {
    dbus filter remove -destination com.tcltest.test.filter \
      -interface com.tcltest.test -member foo -path / \
      -sender com.tcltest.test.filter -type signal
} -result [join {destination='com.tcltest.test.filter' \
  interface='com.tcltest.test' member='foo' path='/' \
  sender='com.tcltest.test.filter' type='signal'} ,]

test filter-1.4 {add filter with wrong option} -body {
    dbus filter add -foo bar
} -returnCodes error -result {bad option "-foo": must be -destination,\
  -eavesdrop, -interface, -member, -path, -sender, or -type}

test filter-1.5 {remove filter with wrong option} -body {
    dbus filter remove -foo bar
} -returnCodes error -result {bad option "-foo": must be -destination,\
  -eavesdrop, -interface, -member, -path, -sender, or -type}

test filter-1.6 {add filter with missing option value} -body {
    dbus filter add -destination com.tcltest.test.filter \
      -interface com.tcltest.test -member foo -path / \
      -sender com.tcltest.test.filter -type
} -returnCodes error -result {bad busId "add"}

test filter-1.7 {add filter with bad -destination option} -body {
    dbus filter add -destination filter
} -returnCodes error -result {Match Error:\
  Destination name 'filter' is invalid}

test filter-1.8 {add filter with bad -interface option} -body {
    dbus filter add -interface filter
} -returnCodes error -result {Match Error: Interface name 'filter' is invalid}

test filter-1.9 {add filter with bad -member option} -body {
    dbus filter add -member {}
} -returnCodes error -result {Match Error: Member name '' is invalid}

test filter-1.10 {add filter with bad -path option} -body {
    dbus filter add -path /test/
} -returnCodes error -result {Match Error: Path '/test/' is invalid}

test filter-1.11 {add filter with bad -sender option} -body {
    dbus filter add -sender filter
} -returnCodes error -result {Match Error: Sender name 'filter' is invalid}

test filter-1.12 {add filter with bad -type option} -body {
    dbus filter add -type method
} -returnCodes error -result {Match Error:\
  Invalid message type (method) in match rule}

test filter-1.13 {add filter with bustype} -body {
    dbus filter session add -type signal
} -cleanup {
    dbus filter session remove -type signal
} -result {type='signal'}

test filter-1.14 {add filter to unconnected bus} -body {
    dbus filter system add -type signal
} -returnCodes error -result {Not connected}

test filter-1.15 {remove non-existing filter} -body {
    dbus filter remove -path /foo/bar
} -result {path='/foo/bar'}

test filter-1.16 {check filter operation} -setup {
    dbus listen /test com.tclcode.test.testsignal handler
    dbus filter add -type signal -path /test
} -body {
    dbus call -dest com.tclcode.test.responder /test com.tclcode.test signal
    after 200 {set signal timeout}
    vwait signal
    return $signal
} -cleanup {
    dbus filter remove -type signal -path /test
    dbus listen /test com.tclcode.test.testsignal {}
} -result {testsignal}

test filter-1.17 {check operation with non-matching filter} -setup {
    dbus listen /test com.tclcode.test.testsignal handler
    dbus filter add -type signal -path /foo
} -body {
    dbus call -dest com.tclcode.test.responder /test com.tclcode.test signal
    after 200 {set signal timeout}
    vwait signal
    return $signal
} -cleanup {
    dbus filter remove -type signal -path /foo
    dbus listen /test com.tclcode.test.testsignal {}
} -result {timeout}

# cleanup
cleanupTests
return
