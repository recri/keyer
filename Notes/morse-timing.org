* Morse timing
** I've implemented a scheme which fixes the dit length at 1*dit_clock
   then allows dah, ies, ils, and iws to be expressed as multiples of
   the dit_clock.
** TWQRQ does it this way
** user specifies ratio and weight which compute as follows
   wpm = new_wpm;
   base_time = 1200.0 / wpm;                   /* true dit time */

   /* adjust for ratio and weight time */
   dit_time = (1.0 * base_time * dit_factor) + weight;
   dah_time = (3.0 * base_time * dah_factor) + weight;

   ies_time = (1.0 * base_time) - weight;
   ils_time = (3.0 * base_time) - weight;
   iws_time = (7.0 * base_time) - weight;
/*------------------------------------------------------------------------*/
   dit_factor = 1.0 + (ratio / 100.0) / 1.0;
   dah_factor = 1.0 - (ratio / 100.0) / 3.0;
/* substitute into above */
   dit_time = (1.0 * base_time * (1.0 + (ratio / 100.0) / 1.0)) + weight;
   dah_time = (3.0 * base_time * (1.0 - (ratio / 100.0) / 3.0)) + weight;
/* distribute product */
   dit_time = ((1.0 * base_time * 1.0 + 1.0 * base_time * (ratio / 100.0) / 1.0)) + weight;
   dah_time = ((3.0 * base_time * 1.0 - 3.0 * base_time * (ratio / 100.0) / 3.0)) + weight;
/* factor out base_time */
   dit_time = ((1.0 * 1.0 + 1.0 * (ratio / 100.0) / 1.0)) * base_time + weight;
   dah_time = ((3.0 * 1.0 - 3.0 * (ratio / 100.0) / 3.0)) * base_time + weight;
/* clean out the ones and extra parens and add back the spaces */
   dit_time = (1.0 + (ratio / 100.0)) * base_time + weight;
   dah_time = (3.0 - (ratio / 100.0)) * base_time + weight;
   ies_time = (1.0) * base_time - weight;
   ils_time = (3.0) * base_time - weight;
   iws_time = (7.0) * base_time - weight;
Morse timing ( at word 50 dits/word, rate = 48000 samples/second)
  |--------+----------+--------------+--------------+-------------+------------+-------------+------------+------------+------------|
  |    wpm |  dit/min |      dit/sec |       dit/ms |      ms/dit | sample/dit |      ms/dah | sample/dah |     ms/iws | sample/iws |
  |--------+----------+--------------+--------------+-------------+------------+-------------+------------+------------+------------|
  |  1/128 | 0.390625 | 6.5104167e-3 | 6.5104167e-6 |   153600.00 |   7372800. |     460800. |  22118400. |   1075200. |  51609600. |
  | 0.0133 |    0.665 |  0.011083333 | 1.1083333e-5 |   90225.567 |  4330827.2 |   270676.70 |  12992482. |  631578.97 |  30315790. |
  |   1/64 |  0.78125 |  0.013020833 | 1.3020833e-5 |   76800.002 |  3686400.1 |   230400.01 |  11059200. |  537600.01 |  25804801. |
  |   1/32 |   1.5625 |  0.026041667 | 2.6041667e-5 |   38400.000 |   1843200. |     115200. |   5529600. |    268800. |  12902400. |
  |   1/16 |    3.125 |  0.052083333 | 5.2083333e-5 |   19200.000 |    921600. |      57600. |   2764800. |    134400. |   6451200. |
  |    1/8 |     6.25 |   0.10416667 | 1.0416667e-4 |   9599.9997 |  460799.99 |   28799.999 |  1382400.0 |  67199.998 |  3225599.9 |
  |    1/4 |     12.5 |   0.20833333 | 2.0833333e-4 |   4800.0001 |  230400.00 |   14400.000 |    691200. |  33600.001 |   1612800. |
  |    1/2 |      25. |   0.41666667 | 4.1666667e-4 |   2400.0000 |    115200. |       7200. |    345600. |     16800. |    806400. |
  |      1 |       50 |   0.83333333 | 8.3333333e-4 |   1200.0000 |     57600. |       3600. |    172800. |      8400. |    403200. |
  |      5 |      250 |    4.1666667 | 4.1666667e-3 |   240.00000 |     11520. |        720. |     34560. |      1680. |     80640. |
  |   5.76 |     288. |          4.8 |       4.8e-3 |   208.33333 |  9999.9998 |   624.99999 |  29999.999 |  1458.3333 |  69999.999 |
  |     10 |      500 |    8.3333333 | 8.3333333e-3 |   120.00000 |      5760. |        360. |     17280. |       840. |     40320. |
  |     12 |      600 |           10 |         0.01 |        100. |      4800. |        300. |     14400. |       700. |     33600. |
  |     20 |     1000 |    16.666667 |  0.016666667 |   59.999999 |  2880.0000 |   180.00000 |      8640. |  419.99999 |     20160. |
  |     40 |     2000 |    33.333333 |  0.033333333 |   30.000000 |      1440. |         90. |      4320. |       210. |     10080. |
  |   57.6 |    2880. |          48. |        0.048 |   20.833333 |  999.99998 |   62.499999 |  2999.9999 |  145.83333 |  6999.9999 |
  |     60 |     3000 |           50 |         0.05 |         20. |       960. |         60. |      2880. |       140. |      6720. |
  |     80 |     4000 |    66.666667 |  0.066666667 |   15.000000 |       720. |         45. |      2160. |       105. |      5040. |
  |    100 |     5000 |    83.333333 |  0.083333333 |   12.000000 |       576. |         36. |      1728. |        84. |      4032. |
  |    120 |     6000 |          100 |          0.1 |         10. |       480. |         30. |      1440. |        70. |      3360. |
  |    400 |    20000 |    333.33333 |   0.33333333 |   3.0000000 |       144. |          9. |       432. |        21. |      1008. |
  |    576 |    28800 |          480 |         0.48 |   2.0833333 |  99.999998 |   6.2499999 |  299.99999 |  14.583333 |  699.99999 |
  |    800 |    40000 |    666.66667 |   0.66666667 |   1.5000000 |        72. |         4.5 |       216. |       10.5 |       504. |
  |   1000 |    50000 |    833.33333 |   0.83333333 |   1.2000000 |       57.6 |         3.6 |      172.8 |        8.4 |      403.2 |
  |   1200 |    60000 |         1000 |            1 |           1 |         48 |           3 |        144 |          7 |        336 |
  |   5760 |   288000 |         4800 |          4.8 |  0.20833333 |  9.9999998 |  0.62499999 |  29.999999 |  1.4583333 |  69.999999 |
  |  12000 |   600000 |        10000 |           10 |         0.1 |        4.8 |         0.3 |       14.4 |        0.7 |       33.6 |
  |  16383 |   819150 |      13652.5 |      13.6525 | 0.073246658 |  3.5158396 |  0.21973997 |  10.547519 | 0.51272661 |  24.610877 |
  |  24000 |  1200000 |        20000 |           20 |        0.05 |        2.4 |        0.15 |        7.2 |       0.35 |       16.8 |
  |  38400 |  1920000 |        32000 |           32 |     0.03125 |        1.5 |     0.09375 |        4.5 |    0.21875 |       10.5 |
  |  48000 |  2400000 |        40000 |           40 |       0.025 |        1.2 |       0.075 |        3.6 |      0.175 |        8.4 |
  |  57600 |  2880000 |        48000 |           48 | 0.020833333 | 0.99999998 | 0.062499999 |  2.9999999 | 0.14583333 |  6.9999999 |
  |--------+----------+--------------+--------------+-------------+------------+-------------+------------+------------+------------|
  #+TBLFM: $2=50*$1::$3=$2/60::$4=$3/1000::$5=1/$4::$6=48*$5::$7=3*$-2::$8=3*$-2::$9=7*$-4::$10=7*$-4
  This table shows the problem with using narrow Goertzel filters
  which is that the bandwidth of the filter begins to approach the
  size of a dit.
*  QRSS - extreme 0.0133 wpm VA3LK beacon on 137.79 Hz
* Weight/Ratio formulas
** dttsp dit_length = ditlen * weight / 50, dah_length = ditlen * weight / 50 + ditlen * 2
** vk6ph dit_length = 1 * scale, dah_length = ((3 * weight) / 50) * scale
