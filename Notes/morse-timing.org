* Morse timing
** I've implemented a scheme which fixes the dit length at 1*dit_clock
   then allows dah, ies, ils, and iws to be expressed as multiples of
   the dit_clock.
** TWQRQ does it this way
** user specifies ratio and weight which compute as follows
   wpm = new_wpm;
   base_time = 1200.0 / wpm;                   /* true dit time */

   /* adjust for ratio and weight time */
   dit_time = (1.0 * base_time * dit_factor) + weight;
   dah_time = (3.0 * base_time * dah_factor) + weight;

   ies_time = (1.0 * base_time) - weight;
   ils_time = (3.0 * base_time) - weight;
   iws_time = (7.0 * base_time) - weight;
/*------------------------------------------------------------------------*/
   dit_factor = 1.0 + (ratio / 100.0) / 1.0;
   dah_factor = 1.0 - (ratio / 100.0) / 3.0;
/* substitute into above */
   dit_time = (1.0 * base_time * (1.0 + (ratio / 100.0) / 1.0)) + weight;
   dah_time = (3.0 * base_time * (1.0 - (ratio / 100.0) / 3.0)) + weight;
/* distribute product */
   dit_time = ((1.0 * base_time * 1.0 + 1.0 * base_time * (ratio / 100.0) / 1.0)) + weight;
   dah_time = ((3.0 * base_time * 1.0 - 3.0 * base_time * (ratio / 100.0) / 3.0)) + weight;
/* factor out base_time */
   dit_time = ((1.0 * 1.0 + 1.0 * (ratio / 100.0) / 1.0)) * base_time + weight;
   dah_time = ((3.0 * 1.0 - 3.0 * (ratio / 100.0) / 3.0)) * base_time + weight;
/* clean out the ones and extra parens and add back the spaces */
   dit_time = (1.0 + (ratio / 100.0)) * base_time + weight;
   dah_time = (3.0 - (ratio / 100.0)) * base_time + weight;
   ies_time = (1.0) * base_time - weight;
   ils_time = (3.0) * base_time - weight;
   iws_time = (7.0) * base_time - weight;
* Morse timing ( at word 50 dits/word, rate = 48000 samples/second)
  |-----+---------+-----------+--------------+--------+------------|
  | wpm | dit/min |   dit/sec |       dit/ms | ms/dit | sample/dit |
  |-----+---------+-----------+--------------+--------+------------|
  |   5 |     250 | 4.1666667 | 4.1666667e-3 |    240 |      11520 |
  |  10 |     500 | 8.3333333 | 8.3333333e-3 |    120 |       5760 |
  |  20 |    1000 | 16.666667 |  0.016666667 |     60 |       2880 |
  |  40 |    2000 | 33.333333 |  0.033333333 |     30 |       1440 |
  |  60 |    3000 |        50 |         0.05 |     20 |        960 |
  |  80 |    4000 | 66.666667 |  0.066666667 |     15 |        720 |
  | 100 |    5000 | 83.333333 |  0.083333333 |     12 |        576 |
  |-----+---------+-----------+--------------+--------+------------|
  #+TBLFM: $2=50*$1::$3=$2/60::$4=$3/1000::$5=round(1/$4)::$6=48*$5
  This table shows the problem with using narrow Goertzel filters
  which is that the bandwidth of the filter begins to approach the
  size of a dit.
* Weight/Ratio formulas
** dttsp dit_length = ditlen * weight / 50, dah_length = ditlen * weight / 50 + ditlen * 2
** vk6ph dit_length = 1 * scale, dah_length = ((3 * weight) / 50) * scale
