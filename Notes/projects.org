* A little thought about what to do
  This will be a lot of different projects dealing with different
  aspects of software defined radio and amateur radio operation
* The MidiKey interface
   Translating paddle or straight key switch closures into MIDI events
   so they can be transferred over USB without no special drivers
   required.
* Extended MidiKey interface
   Implementing the key switches consumes a very small fraction of the 
   microcontroller or the MIDI encoding capacity.
** Other input events
    could be encoded as MIDI events to send to the computer.
*** Trackballs
*** Rotary encoders
*** Other switches
*** Potentiometers
** Output events
    could be sent to the MidiKey as MIDI events, too.
*** Transmitter keying
*** push-to-talk signals
*** Frequency setting
*** Filter bank switching
*** Preselector tuning
*** Antenna tuning
*** LEDs
*** LCDs
* The keyer
   An electronic keyer that translates straight key or paddle switch
   events into a keyed complex oscillator suitable for injection into
   an SDR CW transmitter.
   This includes switch debouncing, iambic keyer, push-to-talk
   generation, and keying the complex oscillator.
   There are alternative electronic keyers that should be explored,
   too, the Iambic A/B is but a small corner of the possibilities.
* CW decoding
   The modules for decoding morse code from the received tones are
   built but not completely tested.
   This includes Goertzal filtering to detect CW power, switch timing
   detection to translate into groups of dits and dahs, and final
   translation of the decoded didahs into characters.
* Bandpass waterfall and spectrum display
   A band filled with CW signals needs a display that spreads the
   signals out in the frequency domain.
* CW band skimming
   Given a working decoder, it's straight forward to implmenent enough
   of them to cover all the CW signals in a bandpass.
* CW bandpass binaural processing
   The natural landscape of a bandpass filled with CW signals is to
   spread their sound out in space the same way the spectrum display
   does.
* Fist and ear training
   Morse code tutoring and games.  So we had the invaders clone, then
   the pileup makeover, now I'm looking at flash card review
   algorithms for perfect learning.
* The keyer as control input
   Having a keyer that simply runs a radio is normal, I'd like to
   provide the ability to control the software from the key, too.

* Receiver
* Switch to LV2 plugin architecture
  I looked at this and I see a lot of work to generate the LV2 plugin
  descriptors in the Turtle RDF format.

  None of that work benefits me because I'll just need to translate it
  back into Tcl to use it.

  More problematic, I don't see a model for how the plugins actually
  execute as LV2 plugins.  When I create Jack Clients and hook them up
  through Jack, I know how the execution model will go.  When I load
  them up as LV2 plugins in some plugin host, I have no idea how the
  execution will be scheduled.  I see them opening one Jack client,
  declaring a Jack port for each plugin port, and then running with
  the result that stacks of plugins generate a buffer worth of delay
  for each.

  It's actually even messier than that.  zynjacku only takes one MIDI
  in which gets distributed to all plugins in the rack, and expects
  them all to be synths, so there isn't any audio input, just outputs,
  one per racked synth, or two if their stereo.  An effects plugin
  rack will probably make a completely different set of assumptions.

  I also don't see the distinction between slow/fast control
  parameters. The examples all compute parameters on every buffer.
  And I don't see the possibility to pass parameters back to the
  control side from the DSP side.

  That said, there are attractions in a plugin style of structuring
  the DSP modules and in separating the metadata from the
  implementation of the module.  But, I would do it by embedding the
  code in a tcl script that could generate code or tcl metadata and
  keep the linkage between the two in sync.  And I would add the
  preconfigure step to the setting of parameters so the cheap and
  expensive parts of parameter computation could be partitioned
  between the process loop and the outside.


  There is, however, a sense in which the plugin style architecture
  could help me simplify my framework.  Rather than implementing all
  of the Tcl command framework for DSP modules, 
