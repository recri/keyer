* How to connect remote hardware and clients?
  So, the future of sdr is to distribute functionality over multiple
  machines wired together over the network.  So rather than writing a
  bespoke interface to my sound card and usbsoftrock controller, I'd
  rather pick a nice common interface and plug into that.

  So, the QtRadio/ghpsdr project seems like a good candidate.  I'm
  looking at ~/Sources/ghpsdr3-alex/trunk/src/dspserver/ozy.c and
  thinking of whether I want to figure it out to write a jack audio
  adapter device to interface that into my radio functions, and I'm
  not feeling like the code in there is what I want to deal with.

  There's an iq thread that receives samples from the remote, passes
  them into an audio callback, and sends the (possibly resampled)
  response samples back to the remote.  Simple enough.  But there's
  also an command port that's sending strings back and forth.  Also
  simple enough.  But then there's also some other audio processing
  going on.  And all the variables are global, so don't even think of
  trying to run more than one.  Maybe I'll feel more comfortable with
  it next week.

  On the other hand, when I go to
  ~/Sources/jack-1.9.8/jack-1.9.8/common/JackNet* I find a collection
  of files which implement networked Jack connections. These can
  contain audio and midi channels. So all I need to do is invent some
  midi sysex conventions for passing control information back and
  forth (probably just steal the hamlib-tcl interface) and run a jack
  midi-hamlib bridge on the hardware server.

  So convert all this ghpsdr3 code, which gets me the various hardware
  interfaces for free, or use jack, stick with sound cards, and make a
  hamlib bridge.
** Using Jack Net
   Oh, all the instructions for using jack on the network are wrong.

   The issue is that there are two, actually three, versions of jack:
   jack1, jack2, and tschak.  The versions have been sapping each
   others energies for a few years, now, and the developers appear to
   have found a new common ground in the past two months.  So things
   may be moving forward, now, but in the meantime, all the
   instructions for using jack on the network are probably wrong.

   The latest releases of jack2 are probably the base for future
   development.  The original developer of jack1 wants them to learn
   how to write better c++, so he's asked that they use the boost
   libraries.  They're moving the source to a git repository.  They're
   using a common source for headers and utilities.  It's all going to
   be better, we can hope.

*** Start the master
   This uses the real soundcard and sets the sample rate for the networked
   connection to the slave
   #+BEGIN_EXAMPLE
   jackd --realtime --driver alsa --device hw:1 --rate 48000
   #+END_EXAMPLE
*** Load the net connection manager on the master
   #+BEGIN_EXAMPLE
    jack_load netmanager
   #+END_EXAMPLE
*** Start the slave
   This is going to be connected up to the master
   #+BEGIN_EXAMPLE
   jackd --realtime --driver net
   #+END_EXAMPLE
*** qjackctl has wrong parameters for net
    Trying to start a net backend from qjackctl gets the error that
    the netone backend doesn't have inchannels and outchannels parameters
    that qjackctl tries to set.  The parameters have different names
    as can be verified with jack_control.

    So you may need to start jack from the command line.
*** Doesn't work very well over the wifi
    It wants a wired connection to be useful.  May need to steal back
    my ethernet switch.
*** Breaks my audio_tap
    The lack of a wired connection renders my audio_tap deaf.  The
    start frames for buffers are no longer neatly aligned with the
    buffer sizes.
