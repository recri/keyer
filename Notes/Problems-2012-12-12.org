* Newest plan - 2013-02-17
**  The basic radio is an overlap save filter
***  on the front end coverts raw incoming IQ samples from time to frequency domain,
*** the front end result is used to generate spectrum displays and waterfalls
**** with some smoothing applied, the overlap save introduces some smoothing in itself
*** the front end result is used to derive IQ amplitude and phase balance corrections
**** Adjustment to     
*** the back end performs the transformations,
    all of which can be combined into a sparse banded matrix multiplication
    against the frequency bins.
**** applies the IQ amplitude and phase balance corrections
     maybe this isn't so good when projected into the frequency domain, but try it
**** translates the baseband frequency to a desired offset by rotating the coefficients
**** decimates the sample rate by linear combination of frequency bin coefficients
**** bandpass filtering to desired bandwidth within the decimated sample rate
**** optional application of notch filters in the bandpass
*** and converts the translated, decimated, band-passed, and notched frequency bins
    back to the time domain at the reduced sample rate
*** the agc and detection phases run at the decimated sample rate
* Newest plan
** The basic toplevel sdrkit component wrapper needs to start jack if necessary
** Parts of the component need to work before jack is started
** Startup component
*** Poll for usb devices
*** Poll for alsa devices
*** Poll for hid devices
*** Start jack with appropriate devices
*** Start sdrkit toplevel component with appropriate devices
* Newest problem list
** Stopped working on it and it stopped working.
** bin/keyer doesn't create a working keyer
*** iambic is enabled but not marked enabled
*** selecting an iambic keyer doesn't bring up controls
*** keyer is not connected and enabled by default.   
** bin/keyer-iambic-ad5dz & bin/keyer-debounce & bin/keyer-tone &
   assembled in jack creates a working keyer but the control panels
   are impotent.
* Start a basic keyer and use it to control everything else
* Control the keyer with the key
** Change the keyer parameters
* Start a morse trainer
** Implement ala aldo, but answer back with key.
* Bring up a waterfall view of a pileup trainer.
** Allow the bandpass to be tuned.  
* Implement the arduino keyer in midi/tcl/jack/sdrkit
* Implement a complete transceiver in loop back mode.
* Implement a complete real receiver.
* Implement a complete real transceiver.
* Implement the Si570 control on the midi keyer.
* Implement the audio interface on the midi keyer.
* Implement an all band transceiver with the receiver monitoring the transmitter
** Have the Tx relay switch Rx to an inductively coupled and variably attenuated 
** Use this to match the transmitter to the antenna
* The principle thing to control is the allocation of connected devices
*** At start up enumerate
    the audio devices,
    the midi devices,
    the radio control devices,
    the user interface devices,
    and decide what to do with them
*** Also re-enumerate as necessary
    to find out what has appeared or disappeared since the last enumeration
    and react appropriately
*** Application has an existence separate from the Jack server
    it may need to stop and restart the Jack server to get the proper devices
    at the proper sample rates and widths in the proper relationship to the server.
*** Needs to know how to enumerate the properties of audio devices
    to find out what sample rates and sample widths are supported
*** Also need to find radio control and user interface devices.
*** The pattern of devices connected may determine the application to launch.
