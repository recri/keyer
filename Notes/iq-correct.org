* IQ Correction
  As Dr. Ettus says, you're much better off fixing this in the hardware
  because fixing it in the software is messy.
  So in the best case, get yourself one fast ADC and make IQ streams by
  resampling its output.
  But we can't all buy $1000 ADC boards, so we muddle on.
* The IQ channels coming from a Softrock or similar design are unbalanced.
** The CMOS switch sampling RF at our desired frequency is not perfect.
   Its on switch and off switch speeds are different, so it doesn't
   chop the RF exactly as design.
** The baseband channels are not precisely balanced either.
   They're built from separate components
   and though they're closely matched, they won't match exactly.
** The IQ channels have a gain imbalance and a phase error.
   The signal coming through one may be a fraction of a dB lower or
   higher than the other.
   The signal coming through the Q channel may be a few degress off of
   90 degrees.
** And the SDR software will see images.
   Even small imbalances in gain or phase of the IQ channels will produce images.
* Alex's Rocky
  synchronously detects images of signals at 30dB or more,
  then the description breaks down into another process.
* Youssef's SDR# optimizes away image power
** take a buffer of raw samples
** repeat:
*** apply a candidate gain/phase correction
   which is differently computed than the dttsp version
   buffer[i].Imag = (float)(buffer[i].Imag * (1.0 + gain) * Math.Cos(phase));
   buffer[i].Real = (float)(buffer[i].Real - buffer[i].Imag * Math.Tan(phase));
*** apply an FFT to the corrected samples
*** computes a utility function which rewards unbalanced energy
   result += Math.Abs(spectrumPtr[i] - spectrumPtr[FFTBins - 2 - i]);
*** and accepts the candidate if it improves the utility function.
* The dttsp adaptive filter rounds the raw signal
** the filter coefficient(s) maintain the state of the filter
   float complex w;
** the learning coefficient adjusts the adaptation rate 
   float mu;
** for each input sample
   float complex z;
** we compute an adjusted sample   
   z += w * conj(z)
** and update the filter coefficient   
   w -= mu * z^2
* The error signal is
  z1 * z1 = z1.re^2 - z1.im^2 + 2 i z1.re z1.im
  to the extent that z1 = cos(phi) + i sin(phi)
  a perfect IQ signal, that becomes
  cos(phi)^2 - sin(phi)^2 + 2 i cos(phi) sin(phi)
  which is an IQ signal at twice the original frequency.
* Using a fixed buffer of samples
** Applying the adaptive filter to the samples is a function of mu and initial w
   For large mu relative to the magnitude of error signal, the filter blows up.
   For smaller mu's, the filter oscillates from overcorrection.
   As mu gets smaller still, the filter settles down.
* The current DTTSP source in the ab2kt branch:
    COMPLEX y;
    CXBimag(sigbuf, i) += iq->phase * CXBreal(sigbuf, i);
    CXBreal(sigbuf, i) *= iq->gain;
    y = Cadd(CXBdata(sigbuf, i), Cmul(iq->w[0], Conjg(CXBdata(sigbuf, i))));
    iq->w[0] = Csub(Cscl(iq->w[0], 1.0 - iq->mu * 0.000001), Cscl(Cmul(y, y), iq->mu));
    CXBdata(sigbuf, i) = y;
** The application of the static phase and gain corrections is not going to expand
   easily into a simple complex multiplication.  imag += phase * real, real \*= gain.
** The application of the dynamic phase is not going to resolve easily into a simple
   phase and gain correction.  sample += w * cconj(sample)
