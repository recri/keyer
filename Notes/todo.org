* Things to Do
** TODO - update README.org so it's current with the code.
------------------------------------------------------------------------
** TODO - install dial control in current setup
** TODO - install ctl logic in current setup
** TODO - debug option connections
** TODO - debug port connections
** TODO - debug activation   
** TODO - make is-busy a standard framework method
** TODO - make graph.tcl take a fixed bbox
** TODO - make graph.tcl use the automated tick labels
** TODO - make graph.tcl draw rectangles
** TODO - make graph.tcl the spectrum readout
** TODO - make graph.tcl callback picks
** TODO - make graph.tcl callback drags
** TODO - make smooth scroll tune to pick
** TODO - use the is-needed method for enabling components
** TODO - implement spectrum
** TODO - debug spectrum, polyphase should smooth the noise floor   
------------------------------------------------------------------------
** TODO - looking and thinking about the sdrsharp IQ balancing,
   it's running off-line, it takes a buffer of samples and repeatedly
   adjusts the IQ balance, runs an fft, computes the utility, accepts
   or rejects the adjustment, and iterates until it maximizes the
   utility.
   The dttsp iq-correct could be structured the same way: take a
   buffer of samples, run the filter until it converges, discarding the
   adjusted samples, reusing the same buffer over and over again, plug
   the converged filter coefficient into the online filter.
** TODO - rewriting the ui components, refactoring and simplifying,
   trying to recover from the trauma of the spectrum coding.  So new
   rules:
*** each of the plain ui components needs to be created with a
   -name option that defines which control part it is;
*** multiple ui components may share that control part;
*** the control part has nothing to do with the window name;
*** the ui components get created at will;
*** there needs to be a central registry of control names;
*** there needs to be a central registry of control name options;    
*** there needs to be a map showing how dsp components are mapped
    onto control names;
*** the configuration names and classes from the dsp components
    should be in one-to-one correspondance with the sdr::types;
*** or are they sdrkit::types;
*** a lot of this stuff should not be created until it's actually
    needed to be used.
** TODO - the RXMeter signal from ghpsdr
   is post filter 10 log10(sum of squared magnitude+smidgen)
   then offset by multimeterCalibrationOffset, which has a series
   of canned adjustments to various soundcards, then offset by
   getFilterSizeCalibrationOffset(), which is 3.0f*(11.0f-log10(buffer-size))
** TODO - elevate this desk, clear it off, and make space underneath it.
** TODO - so a CW sdr is just one keyed oscillator running at LO+CW offset.
   No need to run a lo-mixer for that.  Also discovered that the RX lo-mixer
   actually runs at the negative of the specified offset.
** TODO - the connections pane needs option/enable/activate notification.
   So it needs to hook into the opt chain.
** TODO - figure out how to deal with filter -low low -high high
   If the configuration gets split into option at a time passing, then
   eventually the filter gets a -low that's incompatible with its
   current -high, or vice versa, leading to an error message that's an
   accident and would not a problem except that the incompatible value
   gets discarded, leaving you with a weird filter envelope.
   Done in a hacky way, needs a better solution.
   And the hack bit me when I tried to translate the option names into
   another component.
** TODO - tracing the filter -low -high issue shows a lot of repetition
   The configured values get transmitted to the filter multiple times
   without modification, should stop that, it's going to be expensive.
** TODO - implement -alternates at-most-one, exactly-one, zero-or-more.
   Do this by passing the constraint into the controller and letting
   it enforce it.  Yes, if the controller knew the constraint, then it
   wouldn't go chasing through the dead links.
** TODO - implement -alternates with function specific factories.
   There are only the modulation/demodulation and the variant iambic
   keyers to be done at the moment, why not just write them out.
** TODO - Make the dial/readout multipurpose
   Put a menubutton to the left of the readout which selects the
   purpose.  Build a radiobutton menu of dial-able controls.
** TODO - Make the dial multi-scale.
   Replace the thumb with a line and thumb.  Grabbing the thumb allows
   the scale to be zoomed in and out.  Grabbing the dial anywhere else
   allows the dial to be turned.
** TODO - Make the bottom notebook collapsable.
   One tab can unpack the notebook contents, or each tab can pack on
   select.
** TODO - Make a collapsable settings pane, one column of settings
   along the left edge that unfolds to spinboxes.
** TODO - Style the spinboxes with bigger spin buttons.
** TODO - add the libusb interface necessary to handle softrock-dg8saq
   directly from Tcl.
** TODO - add the modified Togl which implements enough canvas like functions
   to redo the spectrum and waterfall and meters in gl.
------------------------------------------------------------------------
** TODO - get the gain controls correct,
   they should be implementing dB of power ratios by adjusting
   the linear magnitude of voltage signals.  Absolute levels
   should be referenced dBFS, full scale, so to the power of a sine
   wave that touches +1 and -1 peak-to-peak, 0.775 RMS.
** TODO - figure out where the bad values in duelling oscillators come from
** TODO - get networked audio from the softrock
** TODO - build the input stage for the radio
   iq correct with visual metering and adaptive mu, panoramic display,
** TODO - interface with hamlib for rig control
** TODO - interface with hamlib as a rig, use grig to run sdrkit
** TODO - build an adaptive adaptive filter IQ corrector
   Increases mu to increase convergence when the filter is adapting, then
   decreases mu to refine convergence when the filter has found the vicinity
   of the solution.
** TODO - make all the components consistent with evolving conventions.
   This is a tough one since I haven't finished evolving the conventions.
** TODO - factor pileup so it can be used as a signal generator
** TODO - check that command deletion cleans up object valued options
   or make a framework function to deal with it.
** TODO - check that failed configure doesn't lose object valued options
   The save = opts; if fail then opts = save pattern doesn't deal with
   ref counts; the options handler may have decr'ed the saved option
   that we're trying to restore.
** TODO - test for memory leaks.
** TODO - keyer_binaural.c: to spread a monoaural audio spectrum out spatially
   using DJ5IL's CodePhaser circuit.
** TODO - keyer timing: protect against 0 clocks in all possibilities
** TODO - keyer-scope: graticule doesn't track scrolling
** TODO - keyer-scope: time-scale and audio track canvases don't track
   the coordinates with the midi signal canvases after zoom and scroll.
** TODO - MidiKey: to support the AdaFruit atmega32u4breakout.
** TODO - convert all jack SDR modules to take parameters via MIDI sysex
** TODO - build a character trie to decode sysex parameter settings.
** TODO - keyer_detone.c: to convert keyed cw into midi note on/off events.
   done but untested.
** TODO - keyer-control: build, save, and restore custom configurations.
** TODO - keyer-control: ascii input/output window
** TODO - keyer-control: jack launching panel.
** TODO - keyer-control: jack connection panel.
** TODO - jack-control: jack connection panel with modular grouping
   hide/show whole blocks of connections.
** TODO - multi-channel midi-tap, transpose signals to non-overlapping
   channel/note assignments.
** TODO - multi-channel audio-tap
** TODO - operational cartoon of keyer, layout the module connection
   graph and animate the states of signals on the connections between
   them.
** TODO - keyer-control: offer to launch mouse-key
** TODO - sdrkit_jack.c: provide missing jack status information.
** TODO - bin/invaders: callsign-invaders ear/key training game.
** TODO - keyer_skimmer.c: to identify active frequencies in passband and start keyer_detone -> keyer_decode -> ascii.
