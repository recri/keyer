* ui components
  Trying to sort things out in my head.
  There are lots of ui components that can be styled and targeted to
  controling various parameters of the radio.  In general, there are
  way more ways to control a parameter than anyone can remember after
  the initial orientation.
** flavors
*** on/off
    Eg, MOX, mute, spot tone, iq correction, iq swap
**** stand alone checkbutton
**** checkbutton entry in a menu     
*** one of a set
    Eg, mode selection, filter selection from set, agc mode,
    iq delay, band selection, channel selection
**** standalone radiobutton
**** radiobutton entry in a menu
**** pick from graphic
*** numeric range
    Eg, frequency, gain, length, filter limit, filter length
**** standalone scale
**** standalone spinbox
**** standalone dial
**** dial retargeted to one of set
**** push scroll display
**** mouse wheel scroll display
**** pick from display
** wiring
   The basic mode of wiring is to tell the component where the radio
   controller can be found and tell it what parameter it should
   control.  So each component can then arrange to notify the
   controller when its value for the parameter changes.
   And the component can also arrange to have the controller notify it
   when a parameter it depends on changes.
   The basic example of this dependency is the filter set selector
   which changes the filter set depending on the mode selected, and
   further changes the actual filter interpretation depending on the
   cw-pitch selected when operating in CWU or CWL mode.
   So the wiring directly connects the ui controls to the controller,
   and the layout and styling of the components is largely a separate
   issue.
   The issue of loops immediately rears its head.  If a component
   calls the controller, the controller must not call back into the
   component on the same path, things need to terminate.  The
   controller should be registered to receive updates to the parameter
   it controls, in case some other component is also controlling that
   parameter, but it needs two paths for the settings that originate
   from its own manipulation and the settings that come from the
   controller.
