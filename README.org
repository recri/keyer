* Ascii/Iambic morse keyer using Jack audio connection kit
  This is a morse code keyer consisting of jack audio connection kit
  plugins.

  The keyer_tone plugin generates i/q cw tones from midi events.

  The keyer_ascii plugin translates ascii text into midi events to
  drive the tone generator.

  The keyer_iambic plugin translates midi events from an iambic paddle
  into midi events to drive the tone generator.

  The keyer_decode plugin translates midi events into dits, dahs, and
  spaces and prints them.

  Everything runs and times itself off the jack sample rate, there is
  no polling so everything happens with the least latency possible.
* Paddle Interface
  I use a paddle interface built on a breadboard from a Teensy 2.0 (from
  http://www.pjrc.com/teensy/), a stereo audio jack, and three jumper
  wires.
| Teensy B0     | -> | stereo jack dit    |
| Teensy B1     | -> | stereo jack dah    |
| Teensy GND    | -> | stereo jack common |
| Iambic paddle | -> | stereo jack        |
| Teensy USB    | -> | computer           |
  The software to make B0 and B1 transmit USB:MIDI is an example program
  installed with the Teensyduino extension to the Arduino development
  package.

  [[https://github.com/recri/keyer/blob/master/images/keyer-1.jpg][Blurry image1]], [[https://github.com/recri/keyer/blob/master/images/keyer-2.jpg][Blurry image2]], [[https://github.com/recri/keyer/blob/master/images/keyer-3.jpg][Blurry image3]].

  The Teensyduino application to translate paddle transitions into
  MIDI events is in MidiKey/MidiKey.ino

  Glen Overby has built another MIDI key interface which is described
  here http://reality.sgiweb.org/overby/ham/Equipment/Key-Adapter/index.html
* Plugin building
  The keyer and sdrkit plugins build on Ubuntu 11.10 with the
  build-essentials, jackd2, libjack-jackd2-dev, and tk-dev packages
  installed.  Just running make in the root directory should work.

  Note that Ubuntu 11.10 has some confusion in the jackd packaging.
  Some audio packages were built against jackd1 and some against the
  jackd agnostic package, so some audio libraries will force
  installation of the old jackd version 1 package.  I force jackd2
  because it's better.
* Plugin installing
  No provision for installing into local or system wide application
  directories has been made, but if you copy the the programs in the
  ./bin directory into /usr/local/bin, copy the directories in the
  ./lib directory into /usr/local/lib, and you have /usr/local/bin in
  your path, then everything should work.
* Plugin usage -- semi-automatic
  There is a tcl/tk application in the bin directory named
  keyer-control. For the moment, you should run it when jack has
  already been started and it will launch the keyer plugins, connect
  them up, and give you a control interface for adjusting options.
  You can also type characters when it has focus and they will be
  echoed by keyer_ascii.
* Plugin usage -- manual
  Manual use of the plugins is a bit rough at the moment.

  The keyer plugins need to be started as separate programs, each
  running in a shell window, and then connect them in Qjackctl or with
  some other jack wiring interface.
   
  They need to be in shell windows because, at the moment, they'll
  block if you detach them as background processes. It's also useful
  to be able to adjust options or see verbose output.
   
  I use three separate emacs shell windows so I can turn up the
  verbose option and see what's happening in each. 

  The plugins all accept the same command line options. You can get a
  usage summary with the --help option, or any other unrecognized
  option.  It shows the default values and briefly describes each
  option.

  The "server" and "client" options are only effective at the command
  line.

  All other options can be adjusted with inline commands typed to the
  standard input of the running modules.  Simply put the basename of
  the option inside <> with the desired value.  So the reset the tone
  frequency to 440Hz, use <freq440>.
   
  You can also query the current values of the options inline. Just
  put the base option name inside <> with a question mark.  So the
  current words per minute settings are printed with <wpm?>.

  All the plugins recognize all of the options.  The keyer_ascii and
  keyer_iambic plugins will send keyer_tone option changes as midi
  sysex and if keyer_tone is connected it will implement the
  changes.
** Wiring on Qjackctl
   For wiring I use Qjackctl with jack configured to use the "raw" midi
   interface.

   All this could be automated with jack_connect, or automatically
   implemented in the plugins themselves, but I have enough half
   tested code as it is.

   You will be most in control if you start jack with qjackctl before
   you launch any of the plugins.  Starting a plugin before jack
   results in an autostart and a chunk of messages from jackd.

   There are images in the images directory that show what I see when
   I start up this set up my machine.
   
   On the MIDI panel I connect:
   | system       | -> | keyer_iambic |
   | keyer_iambic | -> | keyer_tone   |
   | keyer_ascii  | -> | keyer_tone   |
   On the Audio panel I connect:
   | keyer_tone | -> | system |
   On the ALSA panel I don't connect anything, but I look to see that
   the Teensy MIDI device is connected. 

   This is just one possible set up.  If you don't have a MIDI
   enabled paddle, skip keyer_iambic.  If you don't need no stinking
   keyboard keyer, skip keyer_ascii.  If you want to make a pile up,
   you should be able to start multiple keyer_ascii's and keyer_tone's
   and mix the results into one jack channel.
* Details, Bugs, and Issues
** option usage
   Everybody shares the same option definition table, implements those
   that apply to itself, and sends changes downstream if that makes
   sense.

   The options are implemented as command line options using a
   "--name value" syntax, that's two minus signs in front of the
   option name as one argument followed by the value as a second
   argument.

   The options are implemented as inline commands using a
   "<namevalue>" syntax, that's the option name directly concatenated
   with the option value inside a less-than greater-than bracket.

   Almost all options are runtime configurable, the jack "server"
   and jack "client" names cannot be changed once the plugin starts.

   All of the options which are numbers, eg "wpm", "dah", "freq", and
   "gain", are floating point values.
** common options for all apps
   "verbose" generates output to standard error and will slow down the
   jack process callback if set high enough.

   "chan" specifies which midi channel the communication runs on.
   Note that midi channel 1 is encoded as 0 in midi events.

   "note" specifies which midi note is used for communication. In the
   case of keyer_iambic, "note" specifies the dit and the dah is found
   one higher.  Note that midi note 0 is encoded as 0 in midi events.

   "server" specifies the jack server name to connect to.

   "client" specifies the jack client name to connect as.
** common options for morse code timing
   "word" specifies the number of dit clocks in a word.  Use 50 for
  PARIS and 60 for CODEX.

  "wpm" specifies the words per minute, used with "word" to compute
  the dit clocks per minute.

  "dah" specifies the number of dit clocks in a dah, defaults to 3.0.
  
  "ies" specifies the number of dit clocks in an inter-element space,
  defaults to 1.0.

  "ils" specifies the number of dit clocks in an inter-letter space,
  defaults to 3.0.

  "iws" specifies the number of dit clocks in an inter-word space,
  defaults to 7.0, but you can jack this up get Farnsworth word
  spacing where strings of letters are sent fast with large gaps
  between the words.
** keyer_ascii - ascii to morse keyer
   keyer_ascii implements the common options and the common timing
   options.

   You type to the program's standard input to supply the characters
   to be sent.  Anything it knows will be encoded, that which it
   doesn't know gets silently ignored.

   You can send prosigns by using the backslash.  The input sequence
   \sk will send ...-.-, and \\sos will send ...---...

   And you can insert option queries and settings inline with the <>
   syntax, so <wpm?> to query words per minute and <wpm22.5> to set
   "wpm" to 22.5.
** keyer_decode - midi to dit-dah-space decoder
   keyer_decode implements only the common options.  It infers the
   dit clock rate from midi note on and off events and writes a stream
   of decoded '.',  '-', and ' ' to its standard output.
** keyer_iambic - iambic paddle to morse keyer
   The iambic keyer implements the common options and the common
   timing options.  In addition it implements.

   "swap" reverses the sense of dit and dah.  Normally dit comes in on
  the "chan" channel at "note" and dah one note higher.  Default 0.

  "alsp" specifies if the keyer does automatic letter spacing or
  simply turns off.  Default 0.

  "awsp" specifies if the keyer does automatic word spacing or simply
  turns off.  Default 0.

  "mode" should specify if the keyer implements iambic mode A or mode
  B, but the keyer only does what it does at the moment.
*** Bugs and Issues
   Mode A only, or something like that.

   Stuck keys sometimes, probably MidiKey problem
** keyer_straight - using a straight key
   There isn't any app for this, you wire the MIDI system device
   directly to keyer_tone input, and make sure that your MidiKey
   is sending note 0 for the key, or reconfigure keyer_tone to listen
   to the channel and note your key is sending.
** keyer_tone - midi to i/q tone generator
   It uses a filter based I/Q oscillator which requires a couple of
   multiplies and adds for each step, and the steps are configured to
   be exactly the desired phase difference for each sample.

   It uses the same oscillator to generate a sine ramp for key on and
   key off.  The "rise" and "fall" times can be independently set to the
   desired number of milliseconds.

   The "ramp" option sets "rise" and "fall" to the same number of
   milliseconds.

   The other parameters to keyer_tone are "gain" in decibels and
   "freq" in hertz.
** MidiKey - Teesyduino application
   There's very little to this, you compile in the Teensyduino
   augmented Arduino environment.

   Be sure to specify your board on the Tools > Board menu, and be
   sure to specify MIDI on the Tools > USB Type menu.
   
   Once you've downloaded the compiled sketch, you should see "ID
   16c0:0485 VOTI" listed by lsusb, "USB-Audio - Teensy MIDI" listed
   in /proc/asound/cards, and the same should show up in Qjackctl on
   the ALSA panel.

   Don't forget to install the /etc/udev/rules.d rules file for the
   Teensy.
*** Bugs and Issues
    I think the key debouncing is just slowing things down and missing
    some of the key transitions as a consequence.  Iambic paddles are
    not consumer grade push buttons.  No, it was my bug in the
    jack_process callback that was causing the dropped event problems.
* Things to Do
** DONE - MidiKey: to debounce with a period in microseconds.
   Mangled the existing Bounce class, still not quite right.
** DONE - MidiKey: to use a less ad hoc debouncer.
** DONE - MidiKey: to use the LUFA library for USB.
** TODO - MidiKey: to support the AdaFruit atmega32u4breakout.
   Won't fit in an Altoids Smalls box.
** TODO - keyer_midi.c:  to use a queuing api that looks like jack's event_in queuing. 
** TODO - users of keyer_midi.c: to use the new queuing api.
** TODO - keyer_ascii.c: to throttle input down to the output rate.
** DONE - keyer-control: to use a dedicated keyer_tone for each keyer.
** DONE - keyer-control: to use expect to manage plugins.
   Didn't work out as I hoped.
** TODO ascii - install more code points
** DONE - keyer_iambic - Rewrite the process loop -> iambic_transition
    Make it call iambic_transition at a specified granularity
    irrespective of the jack buffer size, like twice per dit clock.
** TODO - keyer_iambic.c: mode B
    Should only require a short memory of key states, make the next
    element decision at end of inter-element space based on key state
    at 1.5 dit clocks in the past.
** TODO - keyer-control: callsign-invaders ear/key training game.
** TODO - keyer_detone.c: to convert keyed tones into midi.
** TODO - new keyer_mix.c: to mix multiple keyer_tone channels down to a single channel.
** TODO - new keyer_binaural.c: to spread a monoaural audio spectrum out spatially using DJ5IL's CodePhaser circuit.
** TODO - new keyer_skimmer.c: to identify active frequencies in passband and start keyer_detone -> keyer_decode -> ascii.
** TODO - keyer-control: build, save, and restore custom configurations.
** TODO - keyer-control: ascii input/output window
** TODO - keyer-control: examine output of lsp to determine connection possibilities.
** TODO - keyer-control: jack launching panel.
** TODO - keyer-control: jack connection panel.
** TODO - keyer_jack.c: provide missing jack status information.
** TODO - *: insert license information.
** TODO - keyer_*.c: distinguish stdout and stderr better.
** TODO - keyer_framework.c: allow jack thread to buffer output to memory for the main thread to print. Hence input cannot block.
** TODO - keyer_framework.c: implement a tcl command framework.
** TODO - sdrkit_mtap.c: Should add MIDI input to receive the iambic shaped keying.
   That could be used to key a transmitter, play a sidetone, wiggle a
   PTT line, or flash some LED's. 

    
