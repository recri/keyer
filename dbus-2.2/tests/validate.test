if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

package require dbus-tcl

test validate-1.1 {argument check} -body {
    dbus validate
} -returnCodes error -result {wrong # args:\
      should be "dbus validate class string"}

test validate-2.1 {valid interface} {
    dbus validate interface com.tclcode.validate
} 1

test validate-2.2 {interface has not enough elements} {
    dbus validate interface validate
} 0

test validate-2.3 {interface is empty string} {
    dbus validate interface ""
} 0

test validate-2.4 {interface starts with period} {
    dbus validate interface .tclcode.validate
} 0

test validate-2.5 {interface contains empty element} {
    dbus validate interface com..tclcode.validate
} 0

test validate-2.6 {interface contains invalid character} {
    dbus validate interface com.tcl-code.validate
} 0

test validate-3.1 {valid bus name} {
    dbus validate name com.tclcode.validate
} 1

test validate-3.2 {valid unique bus name} {
    dbus validate name :1.42
} 1

test validate-3.3 {bus name containing dash} {
    dbus validate name com.tcl-code.validate
} 1

test validate-3.4 {bus name element starts with a digit} {
    dbus validate name foo.42
} 0

test validate-3.5 {bus name contains only one element} {
    dbus validate name foo
} 0

test validate-3.6 {bus name starts with empty element} {
    dbus validate name .foo
} 0

test validate-3.7 {bus name contains empty element} {
    dbus validate name foo..bar
} 0

test validate-3.8 {bus name ends with empty element} {
    dbus validate name foo.
} 0

test validate-3.9 {bus name contains invalid character} {
    dbus validate name foo.@bar
} 0

test validate-4.1 {valid path} {
    dbus validate path /foo/bar
} 1

test validate-4.2 {root path} {
    dbus validate path /
} 1

test validate-4.3 {trailing slash} {
    dbus validate path /foo/bar/
} 0

test validate-4.4 {no leading slash} {
    dbus validate path foo/bar
} 0

test validate-4.5 {empty path element} {
    dbus validate path /foo//bar
} 0

test validate-4.6 {path containing dash} {
    dbus validate path /foo/bar-baz
} 0

test validate-4.7 {path containing period} {
    dbus validate path /foo/bar.baz
} 0

test validate-5.1 {valid member} {
    dbus validate member foo42
} 1

test validate-5.2 {member name starting with digit} {
    dbus validate member 1foo
} 0

test validate-5.3 {member name containing dash} {
    dbus validate member foo-bar
} 0

test validate-5.4 {member name containing period} {
    dbus validate member foo.bar
} 0

test validate-6.1 {valid signature} {
    dbus validate signature sa(ia{uv}b)q(n(xt))go
} 1

test validate-6.2 {invalid character} {
    dbus validate signature srii
} 0

test validate-6.3 {no array type} {
    dbus validate signature a
} 0

test validate-6.4 {dict entry outside array} {
    dbus validate signature s{ii}
} 0

test validate-6.5 {dict entry missing value} {
    dbus validate signature a{i}
} 0

test validate-6.6 {dict entry with too many specifiers} {
    dbus validate signature a{isb}
} 0

test validate-6.7 {dict entry with invalid key type} {
    dbus validate signature a{vs}
} 0

test validate-6.8 {empty struct} {
    dbus validate signature i()
} 0

test validate-6.9 {missing closing parenthesis} {
    dbus validate signature i(is
} 0

# cleanup
cleanupTests
return
