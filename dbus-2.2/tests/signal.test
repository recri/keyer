if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

package require dbus-tcl
dbus connect

test signal-1.1 {simple signal} -body {
    dbus signal / com.tclcode.test test
} -result {^\d+$} -match regexp

test signal-1.2 {signal with args} -body {
    dbus signal / com.tclcode.test test x 42
} -result {^\d+$} -match regexp

test signal-1.3 {signal with signature} -body {
    dbus signal -signature si / com.tclcode.test test x 42
} -result {^\d+$} -match regexp

test signal-1.4 {signal with bad signature} -body {
    dbus signal -signature foo / com.tclcode.test test x 42
} -returnCodes error -result {Invalid type signature}

test signal-1.5 {signal with wrong type of args} -body {
    dbus signal -signature is / com.tclcode.test test x 42
} -returnCodes error -result {expected integer but got "x"}

test signal-1.6 {signal with all args missing} -body {
    dbus signal -signature is / com.tclcode.test test
} -returnCodes error -result {Argument list does not match signature}

test signal-1.7 {signal with some args missing} -body {
    dbus signal -signature is / com.tclcode.test test 42
} -returnCodes error -result {Argument list does not match signature}

test signal-1.8 {signal with too many args} -body {
    dbus signal -signature is / com.tclcode.test test 42 x foo
} -returnCodes error -result {Arguments left after exhausting the type signature}

test signal-1.9 {signal on specified bus} -body {
    dbus signal session / com.tclcode.test test
} -result {^\d+$} -match regexp

test signal-1.10 {signal on disconnected bus} -body {
    dbus signal system / com.tclcode.test test
} -returnCodes error -result {Not connected}

test signal-1.11 {signal on invalid bus handle} -body {
    dbus signal foo / com.tclcode.test test
} -returnCodes error -result {bad busId "foo"}

test signal-1.12 {signal with invalid path} -body {
    dbus signal // com.tclcode.test test
} -returnCodes error -result {Invalid path}

test signal-1.13 {signal with invalid interface} -body {
    dbus signal / com.tclcode.@test test
} -returnCodes error -result {Invalid bus name}

test signal-1.14 {signal with invalid method} -body {
    dbus signal / com.tclcode.test @test
} -returnCodes error -result {Invalid member}

test signal-1.15 {check signal data} -setup {
    dbus signal /test/foo com.tclcode.test foo
} -body {
    set rc [dbus call -dest com.tclcode.test.responder \
      /test com.tclcode.test dump]
    join [dict values [dict filter $rc key {[msp][eai][stg]*}]] ,
} -result {/test/foo,signal,}

test signal-1.16 {check data of signal with signature} -setup {
    dbus signal -signature si /test/foo com.tclcode.test foo x 42
} -body {
    set rc [dbus call -dest com.tclcode.test.responder \
      /test com.tclcode.test dump]
    join [dict values [dict filter $rc key {[msp][eai][stg]*}]] ,
} -result {/test/foo,signal,si}

test signal-1.17 {check signal data with implied signature} -setup {
    dbus signal /test/foo com.tclcode.test foo x 42
} -body {
    set rc [dbus call -dest com.tclcode.test.responder \
      /test com.tclcode.test dump]
    join [dict values [dict filter $rc key {[msp][eai][stg]*}]] ,
} -result {/test/foo,signal,ss}

# cleanup
cleanupTests
return
