if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2
    namespace import -force ::tcltest::*
}

package require dbus-tcl
dbus connect

proc handler {data args} {
    set ::result [dict get $data messagetype],[lindex $args 0]
}

test call-1.1 {simple call} {
    dbus call -dest com.tclcode.test.responder /test com.tclcode.test ping
} pong

test call-1.2 {async call} {
    dbus call -dest com.tclcode.test.responder -handler handler \
      /test com.tclcode.test ping
    set id [after 500 {set result timeout}]
    vwait result
    after cancel $id
    return $result
} method_return,pong

test call-1.3 {call returning error} -body {
    dbus call -dest com.tclcode.test.responder /test com.tclcode.test error
} -returnCodes error -result {Error message}

test call-1.4 {async call returning an error} {
    dbus call -dest com.tclcode.test.responder -handler handler \
      /test com.tclcode.test error
    set id [after 500 {set result timeout}]
    vwait result
    after cancel $id
    return $result
} {error,Error message}

test call-1.5 {call with rediculously short timeout} -body {
    dbus call -dest com.tclcode.test.responder -timeout 10 \
      /test com.tclcode.test error
} -returnCodes error -result {Did not receive a reply.\
      Possible causes include: the remote application did not send a reply,\
      the message bus security policy blocked the reply,\
      the reply timeout expired, or the network connection was broken.}

test call-1.6 {call with a bad destination} -body {
    dbus call -dest foo /test com.tclcode.test ping
} -returnCodes error -result {Invalid destination}

test call-1.7 {call with an invalid signature} -body {
    dbus call -dest com.tclcode.test.responder -signature foo \
      /test com.tclcode.test ping
} -returnCodes error -result {Invalid type signature}
    
test call-1.8 {call with an bad timeout} -body {
    dbus call -dest com.tclcode.test.responder -timeout foo \
      /test com.tclcode.test ping
} -returnCodes error -result {expected integer but got "foo"}

test call-1.9 {call with empty handler} {
    dbus call -dest com.tclcode.test.responder -handler {} \
      /test com.tclcode.test ping
} pong

# Calling unknwon methods
test call-2.1 {default handling of unknown method} -body {
    dbus call -dest com.tclcode.test.responder \
      /test/foo com.tclcode.test frobnicate
} -returnCodes error -result {No such method 'frobnicate'\
  in interface 'com.tclcode.test' at object path '/test/foo' (signature '')}

test call-2.2 {custom handling of unknown method} -body {
    dbus call -dest com.tclcode.test.responder /test com.tclcode.test foo
} -returnCodes error -result {Unknown method}


# cleanup
cleanupTests
return
